"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetRoutingUnits = exports.RoutingString = exports.RoutingPointDefault = exports.RoutingDefault = void 0;
const value_units_1 = require("../utils/value_units");
function RoutingDefault(copyFrom = undefined) {
    if (copyFrom) {
        return {
            from: RoutingPointDefault(copyFrom.from),
            to: RoutingPointDefault(copyFrom.to),
            amount: copyFrom.amount,
            units: copyFrom.units
        };
    }
    else {
        return {
            from: RoutingPointDefault(),
            to: RoutingPointDefault(),
            amount: undefined,
            units: undefined
        };
    }
}
exports.RoutingDefault = RoutingDefault;
function RoutingPointDefault(copyFrom = undefined) {
    if (copyFrom) {
        return {
            network: copyFrom.network,
            address: copyFrom.address,
            token: copyFrom.token,
            txn_signature: copyFrom.txn_signature
        };
    }
    else {
        return {
            network: "",
            address: "",
            token: "",
            txn_signature: ""
        };
    }
}
exports.RoutingPointDefault = RoutingPointDefault;
function RoutingString(routing) {
    return JSON.stringify(routing, (key, value) => typeof value === 'bigint'
        ? value.toString()
        : JSON.stringify(value, (keyInner, valueInner) => typeof valueInner === 'bigint'
            ? valueInner.toString()
            : valueInner));
}
exports.RoutingString = RoutingString;
function SetRoutingUnits(routing, token) {
    if (!token)
        throw new Error("Token not defined");
    if (routing.units)
        return;
    if (!routing.amount)
        throw new Error("Routing amount not defined");
    if (!token.decimals)
        throw new Error("Routing decimals not defined");
    routing.units = value_units_1.ValueUnits.fromValue(routing.amount, token.decimals).units;
}
exports.SetRoutingUnits = SetRoutingUnits;
