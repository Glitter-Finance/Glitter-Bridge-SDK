"use strict";
// export enum TokenParams {
//     none = 0,
//     name = 1 << 1,
//     symbol = 1 << 2,
//     decimals = 1 << 3,
//     total_supply = 1 << 4,
//     min_transfer = 1 << 5,
//     max_transfer = 1 << 6,
//     fee_divisor = 1 << 7,
//     all = name | symbol | decimals | total_supply | min_transfer | max_transfer | fee_divisor
// }
// export type TokenConfig = {
//     approval_app: number;
//     assets_info: TokenInfo[];
//     loaded: boolean;
// }
// export type TokenInfo = {
//     network: string;
//     name: string;
//     symbol: string;
//     type: string;
//     asset_id: number | undefined;
//     bridge_vault_id: number | undefined;
//     decimals: number;
//     min_transfer: number | undefined;
//     max_transfer: number | undefined;
//     fee_divisor: number | undefined;
//     total_supply: bigint;
//     loaded: boolean;
// }
// export function initToken(options?: Partial<TokenInfo>): TokenInfo {
//     const defaults = {
//         network: "",
//         name: "",
//         symbol: "",
//         type: "",
//         asset_id: undefined,
//         bridge_vault_id: undefined,
//         decimals: 0,
//         min_transfer: undefined,
//         max_transfer: undefined,
//         fee_divisor: undefined,
//         total_supply: BigInt(0),
//         loaded: false
//     }
//     return {
//         ...defaults,
//         ...options,
//     };
// }
Object.defineProperty(exports, "__esModule", { value: true });
exports.BridgeTokens = exports.BridgeTokenDefault = void 0;
function BridgeTokenDefault() {
    return {
        symbol: "",
        network: "",
        address: undefined,
        decimals: 0,
        name: undefined,
        fee_divisor: undefined,
        min_transfer: undefined,
        max_transfer: undefined,
        total_supply: undefined,
    };
}
exports.BridgeTokenDefault = BridgeTokenDefault;
class BridgeTokens {
    static loadConfig(tokens) {
        if (tokens === undefined) {
            throw new Error("Tokens config not found");
        }
        else if (this._tokens === undefined) {
            this._tokens = tokens;
        }
        else {
            //Parse config tokens and add to list
            tokens.forEach((token) => {
                //check if token already exists
                const existing = this.get(token.network, token.symbol);
                if (existing !== undefined) {
                    return existing;
                }
            });
        }
    }
    static get(network, symbol) {
        return this._tokens.find((t) => {
            if (!t.symbol || !t.network)
                return false;
            return (t.network.toLowerCase() === network.toLowerCase() &&
                t.symbol.toLowerCase() === symbol.toLowerCase());
        });
    }
    static add(...args) {
        //Check if already exists
        const existing = this.get(args[0].network, args[0].symbol);
        if (existing === undefined) {
            this._tokens.push(args[0]);
        }
    }
}
exports.BridgeTokens = BridgeTokens;
