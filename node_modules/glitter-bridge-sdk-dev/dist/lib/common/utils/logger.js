"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
const winston_1 = require("winston");
const chalk = __importStar(require("chalk"));
const { combine, printf } = winston_1.format;
const myFormatter = (0, winston_1.format)((info) => {
    info.timestamp = new Date(Date.now()).toISOString();
    //Check logging level
    const levelUpper = info.level.toUpperCase();
    switch (levelUpper) {
        case 'INFO':
            info.message = chalk.green(info.message);
            info.level = chalk.black.bgGreenBright.bold(info.level);
            break;
        case 'WARN':
            info.message = chalk.yellow(info.message);
            info.level = chalk.black.bgYellowBright.bold(info.level);
            break;
        case 'ERROR':
            info.message = chalk.red(info.message);
            info.level = chalk.black.bgRedBright.bold(info.level);
            break;
        default:
            break;
    }
    return info;
})();
class Logger {
    constructor(root, functionName) {
        const local_timestamp = new Date(Date.now());
        const date = local_timestamp.toISOString().split('T')[0];
        const time = local_timestamp.toISOString().split('T')[1].split('.')[0];
        const dateTime = (date + '_' + time).replaceAll(":", ".").replaceAll("-", ".");
        const name = `${functionName}`.toString().split('.')[0];
        const logPath = `${root}/logs/${name}/${dateTime}.log`;
        console.log("Log Path: " + logPath);
        this._logger = (0, winston_1.createLogger)({
            level: 'info',
            format: combine(myFormatter, printf((info) => {
                return `[${chalk.rgb(125, 125, 125)(info.timestamp)}] [${info.level}]: ${info.message}`;
            })),
            transports: [
                new winston_1.transports.Console(),
                new winston_1.transports.File({
                    filename: logPath,
                    maxsize: 5000000,
                    maxFiles: 1000,
                    format: combine(myFormatter, printf((info) => {
                        return `[${chalk.black.bgWhiteBright(info.timestamp)}] [${info.level}]: ${info.message}`;
                    })),
                })
            ],
        });
    }
    log(msg) {
        this._logger.info(msg);
    }
    error(msg) {
        this._logger.error(msg);
    }
    warn(msg) {
        this._logger.warn(msg);
    }
}
exports.Logger = Logger;
