"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlgorandTxns = void 0;
const algosdk = __importStar(require("algosdk"));
const common_1 = require("../../../common");
//import {getUsdcRecieverAddress, getUSDCAssetID} from '../algoConnectionpublic';
class AlgorandTxns {
    //constructor
    constructor(algoClient, accounts) {
        this._client = algoClient;
        this._accounts = accounts;
    }
    get AlgoToken() {
        if (!this._algoToken) {
            this._algoToken = common_1.BridgeTokens.get("algorand", "algo");
        }
        return this._algoToken;
    }
    //Txn Definitions
    sendAlgoTransaction(routing) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Default Parameters
                    const params = yield this._client.getTransactionParams().do();
                    params.fee = 1000;
                    params.flatFee = true;
                    //Get Routing Units
                    if (!routing.units) {
                        (0, common_1.SetRoutingUnits)(routing, this.AlgoToken);
                    }
                    //Encode Note
                    console.log((0, common_1.RoutingString)(routing));
                    const note = algosdk.encodeObj({
                        routing: (0, common_1.RoutingString)(routing),
                        date: `${new Date()}`,
                    });
                    const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
                        suggestedParams: params,
                        from: routing.from.address,
                        to: routing.to.address,
                        amount: Number(routing.units),
                        note: note,
                        closeRemainderTo: undefined,
                        rekeyTo: undefined,
                    });
                    resolve(txn);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    initAlgorandUSDCTokenBridge(routing, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    //Get Default Parameters
                    const params = yield this._client.getTransactionParams().do();
                    params.fee = 1000;
                    params.flatFee = true;
                    const assetID = common_1.BridgeTokens.get("algorand", "usdc");
                    if (!assetID)
                        throw new Error("USDC Asset ID not found");
                    //Get Routing Units
                    if (!routing.units)
                        (0, common_1.SetRoutingUnits)(routing, token);
                    //Encode Note
                    const routingData = {
                        from: {
                            token: "USDC",
                            network: "algorand",
                            address: routing.from.address,
                            txn_signature: "",
                        },
                        to: {
                            token: "USDC",
                            network: "solana",
                            address: routing.to.address,
                            txn_signature: "",
                        },
                        amount: routing.amount,
                        units: routing.amount,
                    };
                    const note = algosdk.encodeObj({
                        system: JSON.stringify(routingData),
                        date: `${new Date()}`,
                    });
                    const UsdcDepositAddress = (_a = this._accounts) === null || _a === void 0 ? void 0 : _a.usdcDeposit;
                    if (!UsdcDepositAddress)
                        throw new Error("USDC Deposit Address not found");
                    const Deposittxn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({
                        suggestedParams: params,
                        assetIndex: Number(assetID.address),
                        from: routing.from.address,
                        to: UsdcDepositAddress,
                        amount: Number(routing.units),
                        note: note,
                        closeRemainderTo: undefined,
                        revocationTarget: undefined,
                        rekeyTo: undefined,
                    });
                    let txnsArray = [Deposittxn];
                    // const groupID = algosdk.computeGroupID(txnsArray);
                    // for (let i = 0; i < 1; i++) txnsArray[i].group = groupID;
                    resolve(txnsArray);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    sendTokensTransaction(routing, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Default Parameters
                    const params = yield this._client.getTransactionParams().do();
                    params.fee = 1000;
                    params.flatFee = true;
                    const assetID = token.address;
                    //Get Routing Units
                    if (!routing.units)
                        (0, common_1.SetRoutingUnits)(routing, token);
                    //Encode Note
                    console.log((0, common_1.RoutingString)(routing));
                    const note = algosdk.encodeObj({
                        routing: (0, common_1.RoutingString)(routing),
                        date: `${new Date()}`,
                    });
                    console.log(`Sending ${routing.units} ${token.symbol} from ${routing.from.address} to ${routing.to.address}`);
                    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({
                        suggestedParams: params,
                        assetIndex: Number(assetID),
                        from: routing.from.address,
                        to: routing.to.address,
                        amount: Number(routing.units),
                        note: note,
                        closeRemainderTo: undefined,
                        revocationTarget: undefined,
                        rekeyTo: undefined,
                    });
                    resolve(txn);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    optinTransaction(address, token_asset_id) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Default Transaction Params
                    const suggestedParams = yield this._client.getTransactionParams().do();
                    //Setup Transaction
                    const transactionOptions = {
                        from: address,
                        assetIndex: token_asset_id,
                        to: address,
                        amount: 0,
                        note: undefined,
                        closeRemainderTo: undefined,
                        revocationTarget: undefined,
                        rekeyTo: undefined,
                        suggestedParams,
                    };
                    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject(transactionOptions);
                    resolve(txn);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    closeOutAccountTransaction(address_closing, address_receiving) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Default Parameters
                    const params = yield this._client.getTransactionParams().do();
                    params.fee = 1000;
                    params.flatFee = true;
                    //Encode Note
                    const note = algosdk.encodeObj({
                        date: `${new Date()}`,
                    });
                    const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({
                        suggestedParams: params,
                        from: address_closing,
                        to: address_receiving,
                        amount: Number(0),
                        note: note,
                        closeRemainderTo: address_receiving,
                        rekeyTo: undefined,
                    });
                    resolve(txn);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    closeOutTokenTransaction(address_closing, address_receiving, token_asset_id) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Default Transaction Params
                    const suggestedParams = yield this._client.getTransactionParams().do();
                    //Setup Transaction
                    const transactionOptions = {
                        from: address_closing,
                        assetIndex: token_asset_id,
                        to: address_receiving,
                        amount: 0,
                        note: undefined,
                        closeRemainderTo: address_receiving,
                        revocationTarget: undefined,
                        rekeyTo: undefined,
                        suggestedParams,
                    };
                    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject(transactionOptions);
                    resolve(txn);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
}
exports.AlgorandTxns = AlgorandTxns;
