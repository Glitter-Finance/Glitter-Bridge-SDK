import algosdk, { Transaction, Algodv2 } from "algosdk";
import { AlgorandTxns } from "./txns";
import { BridgeToken, Routing } from "../../../common";
import { AlgorandAccountsConfig } from "../config";
export declare enum AlgorandBridgeTxnType {
    none = 0,
    token_vault_setup = "token_vault_setup",
    token_vault_update_fee = "token_vault_update_fee",
    token_vault_update_limits = "token_vault_update_limits",
    token_vault_deposit = "token_vault_deposit",
    token_vault_release = "token_vault_release",
    token_vault_refund = "token_vault_refund",
    token_vault_optin = "token_vault_optin",
    xsol_release = "xSOL-release",
    algo_release = "algo-release",
    xsol_deposit = "xSOL-deposit",
    algo_deposit = "algo-deposit",
    xsol_refund = "xSOL-refund",
    algo_refund = "algo-refund",
    usdc_deposit = "usdc-deposit"
}
export declare class AlgorandBridgeTxnsV1 {
    private _bridgeApprovalAppId;
    private _client;
    private _transactions;
    private _accounts;
    constructor(algoClient: Algodv2, appId: number, transactions: AlgorandTxns, accounts: AlgorandAccountsConfig);
    appArgs(functionName: AlgorandBridgeTxnType): Uint8Array[] | undefined;
    appArgs(functionName: AlgorandBridgeTxnType, routing: Routing): Uint8Array[] | undefined;
    appArgs(functionName: AlgorandBridgeTxnType, routing: Routing, token: BridgeToken): Uint8Array[] | undefined;
    HandleUsdcSwap(routing: Routing): Promise<algosdk.Transaction[]>;
    bridgeTransactions(routing: Routing, token: BridgeToken): Promise<algosdk.Transaction[]>;
    ValidateSendRouting(routing: Routing): boolean;
    BridgeApprovalTransaction(functionName: AlgorandBridgeTxnType, routing: Routing, token: BridgeToken): Promise<Transaction>;
    BridgeFeeTransaction(routing: Routing): Promise<Transaction>;
    BridgeDepositTransaction(routing: Routing): Promise<Transaction>;
}
