import { MultisigMetadata } from "algosdk";
import { BridgeToken } from "../../common";
export type AlgorandAccount = {
    addr: string;
    sk: Uint8Array;
    pk: Uint8Array;
    Details: AlgorandAccountDetails | undefined;
};
export type AlgorandMSigAccount = {
    addr: string;
    pk: Uint8Array;
    addresses: string[];
    params: MultisigMetadata;
    Details: AlgorandAccountDetails | undefined;
};
export type AlgorandAccountDetails = {
    units: number | undefined;
    balance: number | undefined;
    min_balance: number | undefined;
    pending_rewards: number | undefined;
    total_apps_created: number | undefined;
    total_apps_opted_in: number | undefined;
    total_assets_opted_in: number | undefined;
    total_assets_created: number | undefined;
    assets: AlgorandAccountAsset[];
};
export type AlgorandAccountAsset = {
    asset_id: number;
    units: bigint;
    frozen: boolean;
    name: string | undefined;
    balance: number | undefined;
    decimals: number | undefined;
};
export declare class AlgorandAccounts {
    algo_decimals: number;
    private _accounts;
    private _msigs;
    private _client;
    constructor(algoClient: any);
    add(...args: [sk: Uint8Array | undefined] | [mnemonic: string | undefined]): Promise<AlgorandAccount | undefined>;
    addMSIG(addreses: string[], version?: number, threshold?: number, getAccountDetails?: boolean, getAssetDetails?: boolean): Promise<AlgorandMSigAccount | undefined>;
    get(addr: string): AlgorandAccount | undefined;
    getMSIG(addreses: string[]): AlgorandMSigAccount | undefined;
    getInfo(account: AlgorandAccount): Promise<Record<string, any> | undefined>;
    getInfo(address: string): Promise<Record<string, any> | undefined>;
    getMnemonic(account: AlgorandAccount): string | undefined;
    private updateInfo;
    updateAccountDetails(local_acccount: AlgorandAccount | undefined, getAssetDetails?: boolean): Promise<AlgorandAccount>;
    createNew(): Promise<AlgorandAccount>;
    createNewWithPrefix(prefix: string, tries?: number): Promise<AlgorandAccount | undefined>;
    getBalance(address: string): Promise<number>;
    getTokensHeld(address: string, token: BridgeToken): Promise<number>;
}
