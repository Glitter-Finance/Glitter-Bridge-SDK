"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlgorandAccounts = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const util = __importStar(require("util"));
const common_1 = require("../../common");
class AlgorandAccounts {
    //constructor
    constructor(algoClient) {
        this.algo_decimals = 6;
        this._accounts = {};
        this._msigs = {};
        this._client = undefined;
        this._client = algoClient;
    }
    //Adders
    add(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Sk
                    let mnemonic = undefined;
                    if (typeof (args[0]) == 'undefined') {
                        throw new Error('DEV_SOLANA_ACCOUNT_TEST not set');
                    }
                    else if (typeof (args[0]) == 'string') {
                        //Convert mnemonic to secret key
                        mnemonic = args[0];
                    }
                    else if (typeof (args[0]) == 'object') {
                        //Convert Uint8Array to secret key
                        let sk = args[0];
                        mnemonic = algosdk_1.default.secretKeyToMnemonic(sk);
                    }
                    //Fail Safe
                    if (!mnemonic)
                        throw new Error("mnemonic not defined");
                    //Convert seed to Account
                    let local_acccount = algosdk_1.default.mnemonicToSecretKey(mnemonic);
                    if (!local_acccount)
                        throw new Error("mnemonic not valid");
                    //Log
                    console.log(`Added Algorand Wallet:  ${local_acccount.addr}`);
                    //Check if already exists
                    if (this._accounts[local_acccount.addr]) {
                        console.log(`Algorand Wallet already exists:  ${local_acccount.addr}`);
                        resolve(this._accounts[local_acccount.addr]);
                        return;
                    }
                    //Get pk
                    local_acccount.pk = algosdk_1.default.decodeAddress(local_acccount.addr).publicKey;
                    //Add to accounts
                    this._accounts[local_acccount.addr] = local_acccount;
                    console.log(util.inspect(local_acccount, false, 5, true /* enable colors */));
                    //return
                    resolve(local_acccount);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    addMSIG(addreses, version = 1, threshold = 2, getAccountDetails = false, getAssetDetails = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const params = {
                        version: version,
                        threshold: threshold,
                        addrs: addreses
                    };
                    //Check if already exists
                    if (this._msigs[addreses.join(",")]) {
                        resolve(this._msigs[addreses.join(",")]);
                        return;
                    }
                    //Get msig
                    const addr = algosdk_1.default.multisigAddress(params);
                    const msig = {
                        addr: addr,
                        addresses: addreses,
                        params: params,
                        Details: undefined,
                        pk: algosdk_1.default.decodeAddress(addr).publicKey
                    };
                    //Get Account Details
                    if (getAccountDetails) {
                        const accountInfo = yield this.getInfo(msig.addr);
                        if (!accountInfo)
                            throw new Error("Account Info not found");
                        msig.Details = yield this.updateInfo(msig.Details, accountInfo, getAssetDetails);
                    }
                    this._msigs[addreses.join(",")] = msig;
                    //return
                    resolve(msig);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Getters
    get(addr) {
        return this._accounts[addr];
    }
    getMSIG(addreses) {
        return this._msigs[addreses.join(",")];
    }
    getInfo(params) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Fail Safe
                    if (!this._client)
                        throw new Error("Algorand Client not defined");
                    let account = undefined;
                    if (typeof params == "string") {
                        account = this.get(params);
                        if (!account)
                            throw new Error("Account not found");
                    }
                    else {
                        account = params;
                    }
                    //Get Balance
                    const accountInfo = yield this._client.accountInformation(account.addr).do();
                    resolve(accountInfo);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    getMnemonic(account) {
        if (!account.sk)
            return undefined;
        return algosdk_1.default.secretKeyToMnemonic(account.sk);
    }
    //Updaters
    updateInfo(account, accountInfo, getAssetDetails = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!account)
                        account = {};
                    account.units = accountInfo.amount;
                    account.balance = common_1.ValueUnits.fromUnits(BigInt(accountInfo.amount), this.algo_decimals).value;
                    account.min_balance = common_1.ValueUnits.fromUnits(BigInt(accountInfo["min-balance"]), this.algo_decimals).value;
                    account.pending_rewards = accountInfo["pending-rewards"];
                    account.total_apps_created = accountInfo["total-created-apps"];
                    account.total_apps_opted_in = accountInfo["total-apps-opted-in"];
                    account.total_assets_opted_in = accountInfo["total-assets-opted-in"];
                    account.total_assets_created = accountInfo["total-created-assets"];
                    for (let i = 0; i < accountInfo.assets.length; i++) {
                        const asset = accountInfo.assets[i];
                        account.assets = account.assets || [];
                        const new_asset = {
                            asset_id: asset["asset-id"],
                            units: asset.amount,
                            frozen: asset["is-frozen"],
                            name: undefined,
                            balance: undefined,
                            decimals: undefined
                        };
                        // if (getAssetDetails) {
                        //     const asset_details = await AlgorandAssets.add(new_asset.asset_id);
                        //     if (asset_details) {
                        //         new_asset.balance = ValueUnits.fromUnits(new_asset.units, asset_details.decimals).value
                        //         new_asset.name = asset_details.name;
                        //         new_asset.decimals = asset_details.decimals;
                        //     }
                        // }
                        account.assets.push(new_asset);
                    }
                    //return
                    resolve(account);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    updateAccountDetails(local_acccount, getAssetDetails = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!local_acccount)
                        throw new Error("Cannot update undefined account");
                    const accountInfo = yield this.getInfo(local_acccount);
                    if (!accountInfo)
                        throw new Error("Account Info not found");
                    local_acccount.Details = yield this.updateInfo(local_acccount.Details, accountInfo, getAssetDetails);
                    //update account list
                    this._accounts[local_acccount.addr] = local_acccount;
                    //return
                    resolve(local_acccount);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Creators
    createNew() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const account = algosdk_1.default.generateAccount();
                    console.log("Account Created: ", account.addr);
                    console.log("mnemonic: ", algosdk_1.default.secretKeyToMnemonic(account.sk));
                    const new_account = {
                        addr: account.addr,
                        sk: account.sk,
                        pk: algosdk_1.default.decodeAddress(account.addr).publicKey,
                        Details: undefined
                    };
                    resolve(new_account);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    createNewWithPrefix(prefix, tries = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    for (let i = 0; i < tries; i++) {
                        //log intervalue of 10
                        if (i % 100 === 0)
                            console.log(`Trying ${i} of ${tries}`);
                        //create mnemonic
                        const account = algosdk_1.default.generateAccount();
                        let addr = account.addr;
                        if (addr.toLowerCase().startsWith(prefix.toLowerCase())) {
                            console.log("Account Created: ", account.addr);
                            console.log("mnemonic: ", algosdk_1.default.secretKeyToMnemonic(account.sk));
                            //Convert to account
                            const new_account = {
                                addr: account.addr,
                                sk: account.sk,
                                pk: algosdk_1.default.decodeAddress(account.addr).publicKey,
                                Details: undefined
                            };
                            //Add to accounts
                            this.add(new_account.sk);
                            //Return
                            resolve(new_account);
                            return;
                        }
                    }
                    console.log(`Could not find a wallet with prefix: ${prefix}`);
                    resolve(undefined);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Account Query
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Fail Safe
                    if (!this._client)
                        throw new Error("Algorand Client not defined");
                    if (!address)
                        throw new Error("Address not defined");
                    const accountInfo = yield this._client.accountInformation(address).do();
                    if (!accountInfo)
                        throw new Error("Account Info not found");
                    return resolve(common_1.ValueUnits.fromUnits(BigInt(accountInfo.amount), this.algo_decimals).value);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    getTokensHeld(address, token) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Fail Safe
                    if (!this._client)
                        throw new Error("Algorand Client not defined");
                    if (!token)
                        throw new Error("Token not defined");
                    if (!address)
                        throw new Error("Address not defined");
                    const accountInfo = yield this._client.accountInformation(address).do();
                    if (!accountInfo)
                        throw new Error("Account Info not found");
                    let tokensHeld = 0;
                    for (let i = 0; i < accountInfo.assets.length; i++) {
                        if (accountInfo.assets[i]['asset-id'] == token.address) {
                            tokensHeld = accountInfo.assets[i].amount;
                        }
                    }
                    return resolve(common_1.ValueUnits.fromUnits(BigInt(tokensHeld), token.decimals).value);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
}
exports.AlgorandAccounts = AlgorandAccounts;
