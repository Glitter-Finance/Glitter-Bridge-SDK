"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlgorandWallet = void 0;
const connect_1 = require("@perawallet/connect");
// @ts-ignore
const myalgo_connect_1 = __importDefault(require("@randlabs/myalgo-connect"));
const eventemitter3_1 = __importDefault(require("eventemitter3"));
// Algorand Wallet class
// Will be used to connect different algorand wallets
class AlgorandWallet extends eventemitter3_1.default {
    // Reconnect pera wallet
    // This will only be used if nothing is detected in pera wallet. We would reconnect it.
    reconnectPeraWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            // Return a promise that will be resolved or rejected
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                try {
                    // Initialize pera wallet and connect
                    const peraWallet = new connect_1.PeraWalletConnect();
                    const result = yield peraWallet.connect();
                    if (((_b = (_a = peraWallet.connector) === null || _a === void 0 ? void 0 : _a.peerMeta) === null || _b === void 0 ? void 0 : _b.name) !== "Pera Wallet") {
                        yield peraWallet.disconnect();
                        reject("Please make sure you connect with Pera Wallet");
                        return;
                    }
                    // On disconnect. If pera wallet gets disconnected the emitter will emit "disconnect" event
                    (_c = peraWallet.connector) === null || _c === void 0 ? void 0 : _c.on("disconnect", () => this.emit("disconnect"));
                    // Get pera wallet address
                    const peraWalletAddress = (result === null || result === void 0 ? void 0 : result[0]) || "";
                    // Resolve
                    resolve({ address: peraWalletAddress, wallet: peraWallet });
                }
                catch (err) {
                    // Reject
                    reject(err);
                }
            }));
        });
    }
    // Connect pera wallet
    connectPeraWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            // Return a promise that will be resolved or rejected
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    // Initialize pera wallet and reconnect session
                    const peraWallet = new connect_1.PeraWalletConnect();
                    const result = yield peraWallet.reconnectSession();
                    // If no result or no length of result found then reconnect
                    if (!result || !(result === null || result === void 0 ? void 0 : result.length)) {
                        const { address, wallet } = yield this.reconnectPeraWallet();
                        resolve({ address, wallet });
                        return;
                    }
                    // On disconnect. If pera wallet gets disconnected the emitter will emit "disconnect" event
                    (_a = peraWallet.connector) === null || _a === void 0 ? void 0 : _a.on("disconnect", () => this.emit("disconnect"));
                    // Get pera wallet address
                    const peraWalletAddress = (result === null || result === void 0 ? void 0 : result[0]) || "";
                    // Resolve
                    resolve({ address: peraWalletAddress, wallet: peraWallet });
                }
                catch (error) {
                    // Reject
                    reject(error);
                }
            }));
        });
    }
    // Disconnect pera wallet
    disconnectPeraWallet() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                // Initialize pera wallet
                const peraWallet = new connect_1.PeraWalletConnect();
                // disconnect pera wallet
                yield peraWallet.disconnect();
                // Resolve
                resolve();
            }
            catch (error) {
                // Reject
                reject(error);
            }
        }));
    }
    // Connect myAlgo wallet
    connectMyAlgo() {
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            try {
                // Initialize MyAlgo wallet
                const myAlgoWallet = new myalgo_connect_1.default();
                // connect myAlgoWallet and get address
                const accounts = yield myAlgoWallet.connect();
                const address = ((_a = accounts === null || accounts === void 0 ? void 0 : accounts[0]) === null || _a === void 0 ? void 0 : _a.address) || "";
                // Resolve
                resolve({ address: address, wallet: myAlgoWallet });
            }
            catch (error) {
                // Reject
                reject(error);
            }
        }));
    }
}
exports.AlgorandWallet = AlgorandWallet;
