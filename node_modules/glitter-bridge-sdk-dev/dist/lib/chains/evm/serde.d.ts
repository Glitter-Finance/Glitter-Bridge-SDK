import { PublicKey } from "@solana/web3.js";
import { ethers } from "ethers";
import algoSdk from "algosdk";
import { BridgeEvmNetworks, BridgeNetworks } from "../../common/networks/networks";
export declare class SerializeEvmBridgeTransfer {
    /**
     * Convert encoded addresses to bytes
     * @param {Network} sourceChain
     * @param {string | algoSdk.Account | PublicKey} address
     * @returns hex string
     */
    static serializeAddress(sourceChain: BridgeNetworks | BridgeEvmNetworks, account: PublicKey | algoSdk.Account | string): string;
    /**
     * Serialize bridge transfer parameters
     * @param {BridgeEvmNetworks} sourceChain
     * @param {BridgeEvmNetworks | BridgeNetworks} destinationChain
     * @param {string} sourceWallet
     * @param {PublicKey | algoSdk.Account | string} destinationWallet
     * @param {ethers.BigNumber} amount
     * @returns Serialized transfer
     */
    static serialize(sourceChain: BridgeEvmNetworks, destinationChain: BridgeEvmNetworks | BridgeNetworks, sourceWallet: string, destinationWallet: PublicKey | algoSdk.Account | string, amount: ethers.BigNumber): {
        sourceChain: number;
        destinationChain: number;
        sourceWallet: string;
        destinationWallet: string;
        amount: string;
    };
}
export declare class DeserializeEvmBridgeTransfer {
    /**
     * Deserialize address from bytes
     * @param {Network} sourceChain
     * @param {string} address
     * @returns {string} formatted address
     */
    static deserializeAddress(chain: BridgeEvmNetworks | BridgeNetworks, data: string): string;
    static deserialize(sourceChainId: number, destinationChainId: number, sourceWallet: string, destinationIdBytes: string, amount: ethers.BigNumber): {
        sourceNetwork: BridgeEvmNetworks;
        destinationNetwork: BridgeEvmNetworks | BridgeNetworks;
        sourceWallet: string;
        destinationWallet: string;
        amount: ethers.BigNumber;
    };
}
