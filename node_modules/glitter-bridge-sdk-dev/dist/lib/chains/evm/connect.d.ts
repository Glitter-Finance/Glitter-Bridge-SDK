import { EvmNetworkConfig } from "./types";
import { ethers, providers } from "ethers";
import { ERC20, TokenBridge } from "glitter-evm-contracts";
import { BridgeDepositEvent, BridgeReleaseEvent, TransferEvent } from "./events";
import { PublicKey } from "@solana/web3.js";
import algosdk from "algosdk";
import { BridgeEvmNetworks, BridgeNetworks } from "../../common/networks/networks";
type Connection = {
    rpcProvider: providers.BaseProvider;
    bridge: TokenBridge;
    tokens: Record<string, ERC20>;
};
export declare class EvmConnect {
    protected readonly __network: BridgeEvmNetworks;
    protected readonly __providers: Connection;
    protected readonly __config: EvmNetworkConfig;
    private createConnections;
    constructor(network: BridgeEvmNetworks, config: EvmNetworkConfig);
    getAddress(entity: "tokens" | "bridge" | "depositWallet" | "releaseWallet", tokenSymbol?: string): string;
    private isValidToken;
    getTokenBalanceOnNetwork(tokenSymbol: string, address: string): Promise<ethers.BigNumber>;
    approveTokensForBridge(tokenSymbol: string, amount: ethers.BigNumber | string, signer: ethers.Signer): Promise<ethers.ContractTransaction>;
    bridgeAllowance(tokenSymbol: string, signer: ethers.Signer): Promise<ethers.BigNumber>;
    parseLogs(txHash: string): Promise<Array<TransferEvent | BridgeDepositEvent | BridgeReleaseEvent>>;
    private isCorrectChain;
    bridge(destination: BridgeNetworks, tokenSymbol: string, amount: ethers.BigNumber | string, destinationWallet: string | PublicKey | algosdk.Account, wallet: ethers.Wallet): Promise<ethers.ContractTransaction>;
}
export {};
