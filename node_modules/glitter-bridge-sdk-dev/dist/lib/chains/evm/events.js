"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmBridgeEventsParser = void 0;
const ethers_1 = require("ethers");
class EvmBridgeEventsParser {
    parseLogs(eventLogs) {
        const bridgeContractinterface = new ethers_1.ethers.utils.Interface(EvmBridgeEventsParser.EventsABI);
        return eventLogs
            .map((log) => {
            try {
                return bridgeContractinterface.parseLog(log);
            }
            catch (error) {
                console.log("[EvmBridgeEvents] Unable to parse event logs.", error);
                return null;
            }
        })
            .filter((parsedLog) => !!parsedLog);
    }
    parseDeposit(logs) {
        const parsedLogs = this.parseLogs(logs);
        const parsedDeposit = parsedLogs.find((x) => x.name === "BridgeDeposit");
        if (!parsedDeposit)
            return null;
        const { destinationChainId, amount, tokenContractAddress, destinationWallet, } = parsedDeposit.args;
        return {
            destinationChainId,
            amount,
            tokenContractAddress,
            destinationWallet,
            __type: "BridgeDeposit",
        };
    }
    parseTransfer(logs) {
        const parsedLogs = this.parseLogs(logs);
        const parsedTransfer = parsedLogs.find((x) => x.name === "Transfer");
        if (!parsedTransfer)
            return null;
        const { from, to, amount } = parsedTransfer.args;
        return {
            amount,
            from,
            to,
            __type: "Transfer",
        };
    }
    parseRelease(logs) {
        const parsedLogs = this.parseLogs(logs);
        const parsedRelease = parsedLogs.find((x) => x.name === "BridgeRelease");
        if (!parsedRelease)
            return null;
        const { amount, tokenContractAddress, destinationWallet, depositId } = parsedRelease.args;
        return {
            amount,
            tokenContractAddress,
            destinationWallet,
            depositId,
            __type: "BridgeRelease",
        };
    }
}
exports.EvmBridgeEventsParser = EvmBridgeEventsParser;
EvmBridgeEventsParser.EventsABI = [
    "event BridgeDeposit(uint16 destinationChainId, uint256 amount, address tokenContractAddress, bytes destinationWallet)",
    "event BridgeRelease(uint256 amount, address tokenContractAddress, address destinationWallet, bytes32 depositId)",
    "event Transfer(address indexed from, address indexed to, uint256 value)",
];
