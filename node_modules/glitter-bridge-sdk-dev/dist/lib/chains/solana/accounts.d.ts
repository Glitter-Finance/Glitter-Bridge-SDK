import * as solanaWeb3 from "@solana/web3.js";
import { Connection, Signer } from "@solana/web3.js";
export type SolanaAccount = {
    addr: string;
    sk: Uint8Array;
    pk: solanaWeb3.PublicKey;
    tokens?: SolanaTokenAccount[];
    Details?: SolanaAccountDetails;
    mnemonic?: string;
};
export type SolanaAccountDetails = {
    units?: number;
    balance?: number;
};
export type SolanaTokenAccount = {
    addr: string;
    pk: solanaWeb3.PublicKey;
    symbol: string;
};
export declare class SolanaAccounts {
    private _accounts;
    private _client?;
    constructor(client: Connection);
    add(...args: [sk: Uint8Array | undefined] | [mnemonic: string | undefined]): Promise<SolanaAccount>;
    updateAccountDetails(local_acccount: SolanaAccount | undefined, getAssetDetails?: boolean): Promise<SolanaAccount>;
    createNew(): Promise<SolanaAccount>;
    createNewWithPrefix(prefix: string, tries?: number): Promise<SolanaAccount | undefined>;
    optinAsset(account: SolanaAccount, symbol: string): Promise<boolean>;
    closeOutAsset(account: SolanaAccount, symbol: string, close_to: string): Promise<boolean>;
    getAccount(addr: string): SolanaAccount | undefined;
    getTokenAccount(addr: string, token: string): SolanaTokenAccount | undefined;
    static getSignerObject(account: SolanaAccount): Signer;
}
