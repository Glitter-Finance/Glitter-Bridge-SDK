"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PhantomProvider = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
// Phantom Provider
// This Provider will be used to connect to a phantom wallet
class PhantomProvider extends eventemitter3_1.default {
    // Get phantom provider
    // See wether phantom wallet is available
    get phantomProvider() {
        var _a;
        const windowBrowser = window;
        // If phantom is not installed return nothing
        if (!((_a = windowBrowser === null || windowBrowser === void 0 ? void 0 : windowBrowser.solana) === null || _a === void 0 ? void 0 : _a.isPhantom)) {
            return;
        }
        // Otherwise return solana window object
        return windowBrowser.solana;
    }
    // Connect
    connect() {
        // Return a promise that will be resolved or rejected
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            try {
                // Get phantom wallet provider
                const provider = this.phantomProvider;
                // If provider does not exist return reject with a phantom wallet app link window
                if (!provider) {
                    window.open("https://phantom.app/", "_blank");
                    reject("You don't have phantom wallet installed");
                    return;
                }
                // On connect
                provider === null || provider === void 0 ? void 0 : provider.on("connect", (args) => this.emit("connect", args));
                // Connect to provider (phantom wallet)
                yield provider.connect();
                // Rseolve
                resolve();
            }
            catch (error) {
                // Reject
                reject(error);
            }
        }));
    }
}
exports.PhantomProvider = PhantomProvider;
