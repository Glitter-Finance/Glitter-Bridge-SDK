"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaWallet = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const sol_wallet_adapter_1 = __importDefault(require("@project-serum/sol-wallet-adapter"));
const config_1 = require("./config");
// Solana Wallet Class
// This class will be used to conenct solana wallets
class SolanaWallet extends eventemitter3_1.default {
    // Connect Solana Wallet public async function
    connectSolanaWallet(walletOption, network) {
        return __awaiter(this, void 0, void 0, function* () {
            // Return a promise that will be resolved or rejected
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    // Find provider which we support
                    const provider = config_1.WALLET_PROVIDERS.find(({ name }) => name === walletOption);
                    // If provider not found reject the promise and return nothing
                    if (!provider) {
                        reject("Wallet option not supported");
                        return;
                    }
                    // Get network type. mainnet, devnet or testnet
                    const networkType = config_1.Network[network];
                    // If network type not found or not supported reject the promise and return nothing
                    if (!networkType) {
                        reject("Network option not supported. Please pick the right network type");
                        return;
                    }
                    // Wallet connection
                    const wallet = new (provider.adapter || sol_wallet_adapter_1.default)(provider.url, network);
                    // Return wallet object. If phantom wallet return phantom provider, otherwsie return normal wallet
                    const walletConnection = walletOption === config_1.SolanaWalletOption.phantom
                        ? wallet.phantomProvider
                        : wallet;
                    // On connect
                    wallet.on("connect", (args) => this.emit("connect", args, walletConnection));
                    // On disconnect
                    wallet.on("disconnect", () => this.emit("disconnect"));
                    // Connect wallet
                    yield wallet.connect();
                    // Resolve
                    resolve();
                }
                catch (error) {
                    // Reject
                    reject(error);
                }
            }));
        });
    }
}
exports.SolanaWallet = SolanaWallet;
