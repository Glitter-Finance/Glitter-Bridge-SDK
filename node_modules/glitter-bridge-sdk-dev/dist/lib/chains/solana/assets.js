"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaAssets = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
class SolanaAssets {
    //Setters
    constructor(client) {
        this._assets = {};
        this._client = client;
    }
    getTokenAddress(mint, owner) {
        return __awaiter(this, void 0, void 0, function* () {
            const allowOwnerOffCurve = false;
            const programId = spl_token_1.TOKEN_PROGRAM_ID;
            const associatedTokenProgramId = spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID;
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const associatedToken = yield (0, spl_token_1.getAssociatedTokenAddress)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);
                    resolve(associatedToken);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    createTokenAccount(signer, owner, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Fail safe
                    if (!token)
                        throw new Error('Token not found');
                    if (!token.address)
                        throw new Error('Token address not found');
                    if (typeof token.address !== "string")
                        throw new Error('Token address not found in string format');
                    if (!this._client)
                        throw new Error('Solana Client not found');
                    //Mint Address
                    const mintAddress = new web3_js_1.PublicKey(token.address);
                    //Get Associated Token Account
                    const address = yield this.getTokenAddress(mintAddress, signer.publicKey);
                    if (!address)
                        throw new Error('Associated Token Address not found');
                    const programId = spl_token_1.TOKEN_PROGRAM_ID;
                    const associatedTokenProgramId = spl_token_1.ASSOCIATED_TOKEN_PROGRAM_ID;
                    const transaction = new web3_js_1.Transaction().add((0, spl_token_1.createAssociatedTokenAccountInstruction)(signer.publicKey, address, owner, mintAddress, programId, associatedTokenProgramId));
                    let result = yield (0, web3_js_1.sendAndConfirmTransaction)(this._client, transaction, [signer], {
                        commitment: "finalized",
                    });
                    //Get Account
                    let account = yield this.getTokenAccount(owner, token);
                    if (!account)
                        throw new Error('Account not found');
                    console.log(`Created Token Account ${address.toBase58()}`);
                    resolve(account);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    getTokenAccount(owner, token) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Fail safe
                    if (!token)
                        throw new Error('Token not found');
                    if (!token.address)
                        throw new Error('Token address not found');
                    if (typeof token.address !== "string")
                        throw new Error('Token address not found in string format');
                    if (!this._client)
                        throw new Error('Solana Client not found');
                    //Mint Address
                    const mintAddress = new web3_js_1.PublicKey(token.address);
                    //Get Associated Token Account
                    const address = yield this.getTokenAddress(mintAddress, owner);
                    if (!address)
                        throw new Error('Associated Token Address not found');
                    let programId = spl_token_1.TOKEN_PROGRAM_ID;
                    //Get Account
                    try {
                        let account = yield (0, spl_token_1.getAccount)(this._client, address, "processed", programId);
                        resolve(account);
                    }
                    catch (error) {
                        console.log("Could not find account");
                        resolve(undefined);
                    }
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
}
exports.SolanaAssets = SolanaAssets;
