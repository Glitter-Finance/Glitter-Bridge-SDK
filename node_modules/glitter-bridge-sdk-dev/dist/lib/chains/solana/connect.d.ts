import { Connection, Transaction } from '@solana/web3.js';
import { SolanaAccount, SolanaAccounts } from './accounts';
import { SolanaAssets } from './assets';
import { SolanaConfig } from './config';
import { BridgeToken, Routing } from '../../common';
export declare class SolanaConnect {
    private _client?;
    private _accounts;
    private _assets;
    private _transactions;
    private _bridgeTxnsV1;
    constructor(config: SolanaConfig);
    get client(): Connection | undefined;
    get accounts(): SolanaAccounts | undefined;
    get assets(): SolanaAssets | undefined;
    createUSDCBridgeTransferInstruction(account: SolanaAccount, fromSymbol: string, toNetwork: string, toAddress: string, tosymbol: string, amount: number): Promise<Transaction | undefined>;
    bridge(account: SolanaAccount, fromSymbol: string, toNetwork: string, toAddress: string, tosymbol: string, amount: number): Promise<unknown>;
    fundAccount(funder: SolanaAccount, account: SolanaAccount, amount: number): Promise<boolean>;
    fundAccountTokens(funder: SolanaAccount, account: SolanaAccount, amount: number, symbol: string): Promise<boolean>;
    closeOutAccount(signer: SolanaAccount, receiver: SolanaAccount): Promise<boolean>;
    sendSol(routing: Routing, signer: SolanaAccount): Promise<boolean>;
    sendTokens(routing: Routing, account: SolanaAccount, token: BridgeToken): Promise<boolean>;
    optinToken(account: SolanaAccount, symbol: string): Promise<boolean>;
    closeOutTokenAccount(signer: SolanaAccount, receiver: SolanaAccount, symbol: string): Promise<unknown>;
    optinAccountExists(account: SolanaAccount, symbol: string): Promise<boolean>;
    getBalance(address: string): Promise<number>;
    waitForBalance(address: string, expectedAmount: number, timeoutSeconds?: number, threshold?: number, anybalance?: boolean, noBalance?: boolean): Promise<number>;
    waitForMinBalance(address: string, minAmount: number, timeoutSeconds?: number): Promise<number>;
    waitForBalanceChange(address: string, startingAmount: number, timeoutSeconds?: number): Promise<number>;
    getTokenBalance(address: string, symbol: string): Promise<number>;
    waitForTokenBalance(address: string, symbol: string, expectedAmount: number, timeoutSeconds?: number, threshold?: number, anybalance?: boolean, noBalance?: boolean): Promise<number>;
    waitForMinTokenBalance(address: string, symbol: string, minAmount: number, timeoutSeconds?: number): Promise<number>;
    waitForTokenBalanceChange(address: string, symbol: string, startingAmount: number, timeoutSeconds?: number): Promise<number>;
    getTestAirDrop(signer: SolanaAccount): Promise<boolean>;
}
