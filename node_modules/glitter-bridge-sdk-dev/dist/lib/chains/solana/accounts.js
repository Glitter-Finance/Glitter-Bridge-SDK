"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaAccounts = void 0;
const solanaWeb3 = __importStar(require("@solana/web3.js"));
const web3_js_1 = require("@solana/web3.js");
const utils_1 = require("./utils");
class SolanaAccounts {
    //Setters
    constructor(client) {
        this._accounts = {};
        this._client = client;
    }
    //Adders
    add(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //Get Sk
                    let sk = undefined;
                    if (typeof (args[0]) == 'undefined') {
                        throw new Error('solana add args not set');
                    }
                    else if (typeof (args[0]) == 'string') {
                        //Convert mnemonic to secret key
                        const mnemonic = args[0];
                        sk = yield utils_1.SolanaUtils.mnemonicToSecretKey(mnemonic);
                    }
                    else if (typeof (args[0]) == 'object') {
                        //Convert Uint8Array to secret key
                        sk = args[0];
                    }
                    //Check secret key
                    if (!sk)
                        throw new Error('Solana Key not found');
                    //Get Wallet
                    const solWallet = solanaWeb3.Keypair.fromSecretKey(sk);
                    if (!solWallet) {
                        throw new Error('Solana Wallet not found');
                    }
                    //Convert to account
                    const solAccount = {
                        addr: solWallet.publicKey.toString(),
                        sk: sk,
                        pk: solWallet.publicKey,
                        Details: undefined
                    };
                    //Add to accounts
                    this._accounts[solAccount.addr] = solAccount;
                    //Log
                    console.log(`Added Solana Wallet:  ${solAccount.addr}`);
                    //Return
                    resolve(solAccount);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Updaters
    updateAccountDetails(local_acccount, getAssetDetails = false) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    if (!local_acccount)
                        throw new Error("Cannot update undefined account");
                    if (!local_acccount.pk)
                        throw new Error("Cannot update undefined account public key");
                    if (!this._client)
                        throw new Error("Cannot update account without client");
                    let balance = yield this._client.getBalance(local_acccount.pk);
                    //Update account details
                    if (!local_acccount.Details)
                        local_acccount.Details = {};
                    local_acccount.Details.balance = balance;
                    //update account list
                    this._accounts[local_acccount.addr] = local_acccount;
                    //return
                    resolve(local_acccount);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Creators
    createNew() {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //create mnemonic
                    const mnemonic = utils_1.SolanaUtils.generateMnemonic();
                    //Create account
                    const keyPair = yield utils_1.SolanaUtils.mnemonicToSecretKey(mnemonic);
                    const wallet = web3_js_1.Keypair.fromSecretKey(keyPair);
                    //Convert to account
                    const solAccount = {
                        addr: wallet.publicKey.toString(),
                        sk: wallet.secretKey,
                        pk: wallet.publicKey,
                        Details: undefined,
                        mnemonic: mnemonic
                    };
                    //Add to accounts
                    this.add(solAccount.sk);
                    //Log
                    console.log(`Mnemonic: ${mnemonic}`);
                    //Return
                    resolve(solAccount);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    createNewWithPrefix(prefix, tries = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line no-async-promise-executor
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    for (let i = 0; i < tries; i++) {
                        //log intervalue of 10
                        if (i % 100 === 0)
                            console.log(`Trying ${i} of ${tries}`);
                        //create mnemonic
                        const mnemonic = utils_1.SolanaUtils.generateMnemonic();
                        const keyPair = yield utils_1.SolanaUtils.mnemonicToSecretKey(mnemonic);
                        const wallet = web3_js_1.Keypair.fromSecretKey(keyPair);
                        let addr = wallet.publicKey.toString();
                        if (addr.toLowerCase().startsWith(prefix.toLowerCase())) {
                            console.log(`Mnemonic: ${mnemonic}`);
                            //Convert to account
                            const solAccount = {
                                addr: wallet.publicKey.toString(),
                                sk: wallet.secretKey,
                                pk: wallet.publicKey,
                                Details: undefined
                            };
                            //Add to accounts
                            this.add(solAccount.sk);
                            //Log
                            console.log(`Mnemonic: ${mnemonic}`);
                            //Return
                            resolve(solAccount);
                            return;
                        }
                    }
                    console.log(`Could not find a wallet with prefix: ${prefix}`);
                    resolve(undefined);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    // public static async closeTokenAccount(signer: SolanaAccount,
    //     receiver: SolanaAccount,
    //     token: BridgeToken): Promise<boolean> {
    //     // eslint-disable-next-line no-async-promise-executor
    //     return new Promise(async (resolve, reject) => {
    //         try {
    //             //Fail Safe
    //             if (!this._client) throw new Error("Solana Client not defined");
    //             if (!signer) throw new Error("Solana Account not defined");
    //             if (!receiver) throw new Error("Solana Account not defined");
    //             if (!token) throw new Error("Token not defined");
    //             let result = await SolanaTransactions.closeOutTokenAccount(signer, receiver,token);
    //             resolve(result);
    //         } catch (error) {
    //             reject(error);
    //         }
    //     });
    // }
    //Functions
    // public static async fundAccountToken(funder: SolanaAccount, account: SolanaAccount, amount: number, symbol: string): Promise<boolean> {
    //     return new Promise(async (resolve, reject) => {
    //         try {
    //             // if (!this._client) throw new Error("Solana Client not defined");
    //             // //Get Token
    //             // const asset = BridgeTokens.get("algorand", symbol);
    //             // if (!asset) throw new Error("Asset not found");
    //             // //Get routing
    //             // const routing = RoutingDefault();
    //             // routing.from.address = funder.addr;
    //             // routing.from.token = symbol;
    //             // routing.from.network = "algorand";
    //             // routing.to.address = account.addr;
    //             // routing.to.token = symbol;
    //             // routing.to.network = "algorand";
    //             // routing.amount = amount;
    //             // let returnValue = await AlgorandTransactions.sendTokens(routing, funder, asset);
    //             resolve(returnValue);
    //         } catch (error) {
    //             reject(error);
    //         }
    //     });
    // }
    optinAsset(account, symbol) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    // if (!this._client) throw new Error("Solana Client not defined");
                    // //Get Token
                    // const asset = BridgeTokens.get("algorand", symbol);
                    // if (!asset) throw new Error("Asset not found");
                    // //Run Transaction
                    // let returnValue = await AlgorandTransactions.optinToken(account, asset);
                    resolve(true);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    closeOutAsset(account, symbol, close_to) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                try {
                    // if (!this._client) throw new Error("Solana Client not defined");
                    // //Get Token
                    // const asset = BridgeTokens.get("algorand", symbol);
                    // if (!asset) throw new Error("Asset not found");
                    // //Run Transaction
                    // let returnValue = await AlgorandTransactions.closeOutTokenAccount(account, close_to, asset);
                    resolve(true);
                }
                catch (error) {
                    reject(error);
                }
            }));
        });
    }
    //Getters
    getAccount(addr) {
        return this._accounts[addr];
    }
    getTokenAccount(addr, token) {
        const account = this._accounts[addr];
        if (!account)
            return undefined;
        if (!account.tokens)
            return undefined;
        account.tokens.forEach(accountToken => {
            if (accountToken.symbol === token)
                return accountToken;
        });
        return undefined;
    }
    static getSignerObject(account) {
        return {
            publicKey: account.pk,
            secretKey: account.sk
        };
    }
}
exports.SolanaAccounts = SolanaAccounts;
