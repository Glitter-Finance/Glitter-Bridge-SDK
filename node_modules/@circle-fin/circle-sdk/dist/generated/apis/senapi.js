"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SENApi = exports.SENApiFactory = exports.SENApiFp = exports.SENApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SENApi - axios parameter creator
 * @export
 */
const SENApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a Silvergate SEN bank account (BETA)
         * @param {SenFiatAccountCreationRequest} [senFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSenAccount: (senFiatAccountCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/sen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(senFiatAccountCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a Silvergate SEN bank account (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessSenAccount", "id", id);
            const localVarPath = `/v1/businessAccount/banks/sen/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).
         * @summary Get Silvergate SEN instructions (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccountInstructions: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessSenAccountInstructions", "id", id);
            const localVarPath = `/v1/businessAccount/banks/sen/{id}/instructions`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary List all Silvergate SEN bank accounts (BETA).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSenAccounts: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/sen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.SENApiAxiosParamCreator = SENApiAxiosParamCreator;
/**
 * SENApi - functional programming interface
 * @export
 */
const SENApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SENApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a Silvergate SEN bank account (BETA)
         * @param {SenFiatAccountCreationRequest} [senFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSenAccount(senFiatAccountCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createBusinessSenAccount(senFiatAccountCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a Silvergate SEN bank account (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessSenAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).
         * @summary Get Silvergate SEN instructions (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccountInstructions(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessSenAccountInstructions(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all Silvergate SEN bank accounts (BETA).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSenAccounts(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listBusinessSenAccounts(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.SENApiFp = SENApiFp;
/**
 * SENApi - factory interface
 * @export
 */
const SENApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SENApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a Silvergate SEN bank account (BETA)
         * @param {SenFiatAccountCreationRequest} [senFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSenAccount(senFiatAccountCreationRequest, options) {
            return localVarFp
                .createBusinessSenAccount(senFiatAccountCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a Silvergate SEN bank account (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccount(id, options) {
            return localVarFp
                .getBusinessSenAccount(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).
         * @summary Get Silvergate SEN instructions (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSenAccountInstructions(id, options) {
            return localVarFp
                .getBusinessSenAccountInstructions(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all Silvergate SEN bank accounts (BETA).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSenAccounts(options) {
            return localVarFp
                .listBusinessSenAccounts(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.SENApiFactory = SENApiFactory;
/**
 * SENApi - object-oriented interface
 * @export
 * @class SENApi
 * @extends {BaseAPI}
 */
class SENApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a Silvergate SEN bank account (BETA)
     * @param {SenFiatAccountCreationRequest} [senFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SENApi
     */
    createBusinessSenAccount(senFiatAccountCreationRequest, options) {
        return (0, exports.SENApiFp)(this.configuration)
            .createBusinessSenAccount(senFiatAccountCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a Silvergate SEN bank account (BETA)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SENApi
     */
    getBusinessSenAccount(id, options) {
        return (0, exports.SENApiFp)(this.configuration)
            .getBusinessSenAccount(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Silvergate SEN transfer instructions into the Circle bank account given your bank account id (BETA).
     * @summary Get Silvergate SEN instructions (BETA)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SENApi
     */
    getBusinessSenAccountInstructions(id, options) {
        return (0, exports.SENApiFp)(this.configuration)
            .getBusinessSenAccountInstructions(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all Silvergate SEN bank accounts (BETA).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SENApi
     */
    listBusinessSenAccounts(options) {
        return (0, exports.SENApiFp)(this.configuration)
            .listBusinessSenAccounts(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SENApi = SENApi;
//# sourceMappingURL=data:application/json;base64,