"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentsApi = exports.PaymentsApiFactory = exports.PaymentsApiFp = exports.PaymentsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
const PaymentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * The payment will be voided if possible meaning the payment source will not be charged & the payment will never settle. Otherwise, the payment will be refunded meaning the payment source will be charged & the payment will be refunded from deductions of future settlements. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been cancelled; it only means the cancellation request is successfully submitted.
         * @summary Cancel a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CancelCreationRequest} [cancelCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment: (id, cancelCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("cancelPayment", "id", id);
            const localVarPath = `/v1/payments/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(cancelCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Warning: Please contact Circle support if you are planning on using this feature.  The given amount will be captured for the authorized payment if possible. If no amount is specified, the full amount will be captured. You can only capture once per authorization.  A successful response does *not* mean the payment has been captured. It only means the capture request was successfully submitted.
         * @summary Capture a payment (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CaptureCreationRequest} [captureCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment: (id, captureCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("capturePayment", "id", id);
            const localVarPath = `/v1/payments/{id}/capture`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(captureCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * In the sandbox environment, initiate a mock SEPA payment that mimics the behavior of funds sent through the bank (SEPA) account linked to master wallet.
         * @summary Create a mock SEPA payment
         * @param {MockSepaPaymentRequest} [mockSepaPaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockSepaPayment: (mockSepaPaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/mocks/payments/sepa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mockSepaPaymentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * In the sandbox environment, initiate a mock wire payment that mimics the behavior of funds sent through the bank (wire) account linked to master wallet.
         * @summary Create a mock Wire payment
         * @param {MockWirePaymentRequest} [mockWirePaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockWirePayment: (mockWirePaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/mocks/payments/wire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mockWirePaymentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Create a payment
         * @param {PaymentCreationRequest} [paymentCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment: (paymentCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(paymentCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getPayment", "id", id);
            const localVarPath = `/v1/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary List all payments
         * @param {string} [source] Universally unique identifier (UUID v4) for the source. Filters results to fetch only payments made from the provdided source.
         * @param {string} [settlementId] Queries items with the specified settlement id. Matches any settlement id if unspecified.
         * @param {string} [paymentIntentId] Queries items with the specified payment intent id.
         * @param {Set<'card' | 'wire' | 'ach' | 'sepa'>} [type] Source account type. Filters the results to fetch all payments made from a specified account type. Matches any source type if unspecified.
         * @param {'pending' | 'confirmed' | 'paid' | 'failed' | 'action_required'} [status] Queries items with the specified status. Matches any status if unspecified.
         * @param {string} [from] Queries items created since the specified date-time (inclusive).
         * @param {string} [to] Queries items created before the specified date-time (inclusive).
         * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
         * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
         * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments: (source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (source !== undefined) {
                localVarQueryParameter["source"] = source;
            }
            if (settlementId !== undefined) {
                localVarQueryParameter["settlementId"] = settlementId;
            }
            if (paymentIntentId !== undefined) {
                localVarQueryParameter["paymentIntentId"] = paymentIntentId;
            }
            if (type) {
                localVarQueryParameter["type"] = Array.from(type);
            }
            if (status !== undefined) {
                localVarQueryParameter["status"] = status;
            }
            if (from !== undefined) {
                localVarQueryParameter["from"] =
                    from instanceof Date ? from.toISOString() : from;
            }
            if (to !== undefined) {
                localVarQueryParameter["to"] =
                    to instanceof Date ? to.toISOString() : to;
            }
            if (pageBefore !== undefined) {
                localVarQueryParameter["pageBefore"] = pageBefore;
            }
            if (pageAfter !== undefined) {
                localVarQueryParameter["pageAfter"] = pageAfter;
            }
            if (pageSize !== undefined) {
                localVarQueryParameter["pageSize"] = pageSize;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * The payment source will be refunded if possible. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been refunded; it only means the refund request is successfully submitted.
         * @summary Refund a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {RefundCreationRequest} [refundCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment: (id, refundCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("refundPayment", "id", id);
            const localVarPath = `/v1/payments/{id}/refund`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(refundCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.PaymentsApiAxiosParamCreator = PaymentsApiAxiosParamCreator;
/**
 * PaymentsApi - functional programming interface
 * @export
 */
const PaymentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.PaymentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * The payment will be voided if possible meaning the payment source will not be charged & the payment will never settle. Otherwise, the payment will be refunded meaning the payment source will be charged & the payment will be refunded from deductions of future settlements. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been cancelled; it only means the cancellation request is successfully submitted.
         * @summary Cancel a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CancelCreationRequest} [cancelCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment(id, cancelCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelPayment(id, cancelCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Warning: Please contact Circle support if you are planning on using this feature.  The given amount will be captured for the authorized payment if possible. If no amount is specified, the full amount will be captured. You can only capture once per authorization.  A successful response does *not* mean the payment has been captured. It only means the capture request was successfully submitted.
         * @summary Capture a payment (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CaptureCreationRequest} [captureCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment(id, captureCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.capturePayment(id, captureCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * In the sandbox environment, initiate a mock SEPA payment that mimics the behavior of funds sent through the bank (SEPA) account linked to master wallet.
         * @summary Create a mock SEPA payment
         * @param {MockSepaPaymentRequest} [mockSepaPaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockSepaPayment(mockSepaPaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMockSepaPayment(mockSepaPaymentRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * In the sandbox environment, initiate a mock wire payment that mimics the behavior of funds sent through the bank (wire) account linked to master wallet.
         * @summary Create a mock Wire payment
         * @param {MockWirePaymentRequest} [mockWirePaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockWirePayment(mockWirePaymentRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createMockWirePayment(mockWirePaymentRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a payment
         * @param {PaymentCreationRequest} [paymentCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(paymentCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createPayment(paymentCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getPayment(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all payments
         * @param {string} [source] Universally unique identifier (UUID v4) for the source. Filters results to fetch only payments made from the provdided source.
         * @param {string} [settlementId] Queries items with the specified settlement id. Matches any settlement id if unspecified.
         * @param {string} [paymentIntentId] Queries items with the specified payment intent id.
         * @param {Set<'card' | 'wire' | 'ach' | 'sepa'>} [type] Source account type. Filters the results to fetch all payments made from a specified account type. Matches any source type if unspecified.
         * @param {'pending' | 'confirmed' | 'paid' | 'failed' | 'action_required'} [status] Queries items with the specified status. Matches any status if unspecified.
         * @param {string} [from] Queries items created since the specified date-time (inclusive).
         * @param {string} [to] Queries items created before the specified date-time (inclusive).
         * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
         * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
         * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * The payment source will be refunded if possible. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been refunded; it only means the refund request is successfully submitted.
         * @summary Refund a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {RefundCreationRequest} [refundCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment(id, refundCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refundPayment(id, refundCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.PaymentsApiFp = PaymentsApiFp;
/**
 * PaymentsApi - factory interface
 * @export
 */
const PaymentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.PaymentsApiFp)(configuration);
    return {
        /**
         * The payment will be voided if possible meaning the payment source will not be charged & the payment will never settle. Otherwise, the payment will be refunded meaning the payment source will be charged & the payment will be refunded from deductions of future settlements. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been cancelled; it only means the cancellation request is successfully submitted.
         * @summary Cancel a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CancelCreationRequest} [cancelCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPayment(id, cancelCreationRequest, options) {
            return localVarFp
                .cancelPayment(id, cancelCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Warning: Please contact Circle support if you are planning on using this feature.  The given amount will be captured for the authorized payment if possible. If no amount is specified, the full amount will be captured. You can only capture once per authorization.  A successful response does *not* mean the payment has been captured. It only means the capture request was successfully submitted.
         * @summary Capture a payment (BETA)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {CaptureCreationRequest} [captureCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment(id, captureCreationRequest, options) {
            return localVarFp
                .capturePayment(id, captureCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * In the sandbox environment, initiate a mock SEPA payment that mimics the behavior of funds sent through the bank (SEPA) account linked to master wallet.
         * @summary Create a mock SEPA payment
         * @param {MockSepaPaymentRequest} [mockSepaPaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockSepaPayment(mockSepaPaymentRequest, options) {
            return localVarFp
                .createMockSepaPayment(mockSepaPaymentRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * In the sandbox environment, initiate a mock wire payment that mimics the behavior of funds sent through the bank (wire) account linked to master wallet.
         * @summary Create a mock Wire payment
         * @param {MockWirePaymentRequest} [mockWirePaymentRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMockWirePayment(mockWirePaymentRequest, options) {
            return localVarFp
                .createMockWirePayment(mockWirePaymentRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a payment
         * @param {PaymentCreationRequest} [paymentCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayment(paymentCreationRequest, options) {
            return localVarFp
                .createPayment(paymentCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayment(id, options) {
            return localVarFp
                .getPayment(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all payments
         * @param {string} [source] Universally unique identifier (UUID v4) for the source. Filters results to fetch only payments made from the provdided source.
         * @param {string} [settlementId] Queries items with the specified settlement id. Matches any settlement id if unspecified.
         * @param {string} [paymentIntentId] Queries items with the specified payment intent id.
         * @param {Set<'card' | 'wire' | 'ach' | 'sepa'>} [type] Source account type. Filters the results to fetch all payments made from a specified account type. Matches any source type if unspecified.
         * @param {'pending' | 'confirmed' | 'paid' | 'failed' | 'action_required'} [status] Queries items with the specified status. Matches any status if unspecified.
         * @param {string} [from] Queries items created since the specified date-time (inclusive).
         * @param {string} [to] Queries items created before the specified date-time (inclusive).
         * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
         * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
         * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options) {
            return localVarFp
                .listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The payment source will be refunded if possible. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been refunded; it only means the refund request is successfully submitted.
         * @summary Refund a payment
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {RefundCreationRequest} [refundCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundPayment(id, refundCreationRequest, options) {
            return localVarFp
                .refundPayment(id, refundCreationRequest, options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.PaymentsApiFactory = PaymentsApiFactory;
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
class PaymentsApi extends base_1.BaseAPI {
    /**
     * The payment will be voided if possible meaning the payment source will not be charged & the payment will never settle. Otherwise, the payment will be refunded meaning the payment source will be charged & the payment will be refunded from deductions of future settlements. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been cancelled; it only means the cancellation request is successfully submitted.
     * @summary Cancel a payment
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {CancelCreationRequest} [cancelCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    cancelPayment(id, cancelCreationRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .cancelPayment(id, cancelCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Warning: Please contact Circle support if you are planning on using this feature.  The given amount will be captured for the authorized payment if possible. If no amount is specified, the full amount will be captured. You can only capture once per authorization.  A successful response does *not* mean the payment has been captured. It only means the capture request was successfully submitted.
     * @summary Capture a payment (BETA)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {CaptureCreationRequest} [captureCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    capturePayment(id, captureCreationRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .capturePayment(id, captureCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * In the sandbox environment, initiate a mock SEPA payment that mimics the behavior of funds sent through the bank (SEPA) account linked to master wallet.
     * @summary Create a mock SEPA payment
     * @param {MockSepaPaymentRequest} [mockSepaPaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    createMockSepaPayment(mockSepaPaymentRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .createMockSepaPayment(mockSepaPaymentRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * In the sandbox environment, initiate a mock wire payment that mimics the behavior of funds sent through the bank (wire) account linked to master wallet.
     * @summary Create a mock Wire payment
     * @param {MockWirePaymentRequest} [mockWirePaymentRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    createMockWirePayment(mockWirePaymentRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .createMockWirePayment(mockWirePaymentRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a payment
     * @param {PaymentCreationRequest} [paymentCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    createPayment(paymentCreationRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .createPayment(paymentCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a payment
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    getPayment(id, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .getPayment(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all payments
     * @param {string} [source] Universally unique identifier (UUID v4) for the source. Filters results to fetch only payments made from the provdided source.
     * @param {string} [settlementId] Queries items with the specified settlement id. Matches any settlement id if unspecified.
     * @param {string} [paymentIntentId] Queries items with the specified payment intent id.
     * @param {Set<'card' | 'wire' | 'ach' | 'sepa'>} [type] Source account type. Filters the results to fetch all payments made from a specified account type. Matches any source type if unspecified.
     * @param {'pending' | 'confirmed' | 'paid' | 'failed' | 'action_required'} [status] Queries items with the specified status. Matches any status if unspecified.
     * @param {string} [from] Queries items created since the specified date-time (inclusive).
     * @param {string} [to] Queries items created before the specified date-time (inclusive).
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next &#x60;n&#x60; items before the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next &#x60;n&#x60; items after the id, with &#x60;n&#x60; being specified by &#x60;pageSize&#x60;.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither &#x60;pageAfter&#x60; nor &#x60;pageBefore&#x60; are specified.  SHOULD NOT be used in conjuction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .listPayments(source, settlementId, paymentIntentId, type, status, from, to, pageBefore, pageAfter, pageSize, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The payment source will be refunded if possible. Not all payments are eligible to be cancelled.  A successful response does *not* mean the payment has been refunded; it only means the refund request is successfully submitted.
     * @summary Refund a payment
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {RefundCreationRequest} [refundCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    refundPayment(id, refundCreationRequest, options) {
        return (0, exports.PaymentsApiFp)(this.configuration)
            .refundPayment(id, refundCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.PaymentsApi = PaymentsApi;
//# sourceMappingURL=data:application/json;base64,