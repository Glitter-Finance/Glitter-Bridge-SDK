/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { AchCreationRequest } from "../models";
import { CreateAchAccountResponse } from "../models";
import { CreateMockAchAccountResponse } from "../models";
import { GetAchAccountResponse } from "../models";
import { MockAchAccountCreationRequest } from "../models";
/**
 * ACHApi - axios parameter creator
 * @export
 */
export declare const ACHApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a ACH bank account
     * @param {AchCreationRequest} [achCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAchAccount: (achCreationRequest?: AchCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * In the sandbox environment, create a mock ACH account and retrieve a processor token that can be used to link an ACH account.
     * @summary Create a mock ACH bank account
     * @param {MockAchAccountCreationRequest} [mockAchAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMockAchAccount: (mockAchAccountCreationRequest?: MockAchAccountCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a ACH bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAchAccount: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ACHApi - functional programming interface
 * @export
 */
export declare const ACHApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a ACH bank account
     * @param {AchCreationRequest} [achCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAchAccount(achCreationRequest?: AchCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAchAccountResponse>>;
    /**
     * In the sandbox environment, create a mock ACH account and retrieve a processor token that can be used to link an ACH account.
     * @summary Create a mock ACH bank account
     * @param {MockAchAccountCreationRequest} [mockAchAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMockAchAccount(mockAchAccountCreationRequest?: MockAchAccountCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMockAchAccountResponse>>;
    /**
     *
     * @summary Get a ACH bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAchAccount(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAchAccountResponse>>;
};
/**
 * ACHApi - factory interface
 * @export
 */
export declare const ACHApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a ACH bank account
     * @param {AchCreationRequest} [achCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAchAccount(achCreationRequest?: AchCreationRequest, options?: any): AxiosPromise<CreateAchAccountResponse>;
    /**
     * In the sandbox environment, create a mock ACH account and retrieve a processor token that can be used to link an ACH account.
     * @summary Create a mock ACH bank account
     * @param {MockAchAccountCreationRequest} [mockAchAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMockAchAccount(mockAchAccountCreationRequest?: MockAchAccountCreationRequest, options?: any): AxiosPromise<CreateMockAchAccountResponse>;
    /**
     *
     * @summary Get a ACH bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAchAccount(id: string, options?: any): AxiosPromise<GetAchAccountResponse>;
};
/**
 * ACHApi - object-oriented interface
 * @export
 * @class ACHApi
 * @extends {BaseAPI}
 */
export declare class ACHApi extends BaseAPI {
    /**
     *
     * @summary Create a ACH bank account
     * @param {AchCreationRequest} [achCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHApi
     */
    createAchAccount(achCreationRequest?: AchCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateAchAccountResponse>>;
    /**
     * In the sandbox environment, create a mock ACH account and retrieve a processor token that can be used to link an ACH account.
     * @summary Create a mock ACH bank account
     * @param {MockAchAccountCreationRequest} [mockAchAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHApi
     */
    createMockAchAccount(mockAchAccountCreationRequest?: MockAchAccountCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateMockAchAccountResponse>>;
    /**
     *
     * @summary Get a ACH bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ACHApi
     */
    getAchAccount(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetAchAccountResponse>>;
}
