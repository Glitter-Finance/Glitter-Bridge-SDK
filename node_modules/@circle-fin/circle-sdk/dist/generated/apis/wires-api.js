"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WiresApi = exports.WiresApiFactory = exports.WiresApiFp = exports.WiresApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * WiresApi - axios parameter creator
 * @export
 */
const WiresApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessWireAccount: (wireCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/wires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(wireCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWireAccount: (wireCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/banks/wires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(wireCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessWireAccount", "id", id);
            const localVarPath = `/v1/businessAccount/banks/wires/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id.
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccountInstructions: (id, currency, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessWireAccountInstructions", "id", id);
            const localVarPath = `/v1/businessAccount/banks/wires/{id}/instructions`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (currency !== undefined) {
                localVarQueryParameter["currency"] = currency;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getWireAccount", "id", id);
            const localVarPath = `/v1/banks/wires/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccountInstructions: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getWireAccountInstructions", "id", id);
            const localVarPath = `/v1/banks/wires/{id}/instructions`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary List all Wire bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessWireAccounts: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/wires`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.WiresApiAxiosParamCreator = WiresApiAxiosParamCreator;
/**
 * WiresApi - functional programming interface
 * @export
 */
const WiresApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.WiresApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessWireAccount(wireCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createBusinessWireAccount(wireCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWireAccount(wireCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createWireAccount(wireCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessWireAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id.
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccountInstructions(id, currency, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessWireAccountInstructions(id, currency, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWireAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccountInstructions(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWireAccountInstructions(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all Wire bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessWireAccounts(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listBusinessWireAccounts(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.WiresApiFp = WiresApiFp;
/**
 * WiresApi - factory interface
 * @export
 */
const WiresApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.WiresApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessWireAccount(wireCreationRequest, options) {
            return localVarFp
                .createBusinessWireAccount(wireCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Create a Wire bank account
         * @param {WireCreationRequest} [wireCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWireAccount(wireCreationRequest, options) {
            return localVarFp
                .createWireAccount(wireCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccount(id, options) {
            return localVarFp
                .getBusinessWireAccount(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id.
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessWireAccountInstructions(id, currency, options) {
            return localVarFp
                .getBusinessWireAccountInstructions(id, currency, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a Wire bank account
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccount(id, options) {
            return localVarFp
                .getWireAccount(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get the wire transfer instructions into the Circle bank account given your bank account id
         * @summary Get Wire instructions
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWireAccountInstructions(id, options) {
            return localVarFp
                .getWireAccountInstructions(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all Wire bank accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessWireAccounts(options) {
            return localVarFp
                .listBusinessWireAccounts(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.WiresApiFactory = WiresApiFactory;
/**
 * WiresApi - object-oriented interface
 * @export
 * @class WiresApi
 * @extends {BaseAPI}
 */
class WiresApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a Wire bank account
     * @param {WireCreationRequest} [wireCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    createBusinessWireAccount(wireCreationRequest, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .createBusinessWireAccount(wireCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Create a Wire bank account
     * @param {WireCreationRequest} [wireCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    createWireAccount(wireCreationRequest, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .createWireAccount(wireCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a Wire bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    getBusinessWireAccount(id, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .getBusinessWireAccount(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the wire transfer instructions into the Circle bank account given your bank account id.
     * @summary Get Wire instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {'USD' | 'EUR'} [currency] Queries beneficiary bank account currency. Default is USD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    getBusinessWireAccountInstructions(id, currency, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .getBusinessWireAccountInstructions(id, currency, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a Wire bank account
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    getWireAccount(id, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .getWireAccount(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the wire transfer instructions into the Circle bank account given your bank account id
     * @summary Get Wire instructions
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    getWireAccountInstructions(id, options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .getWireAccountInstructions(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all Wire bank accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WiresApi
     */
    listBusinessWireAccounts(options) {
        return (0, exports.WiresApiFp)(this.configuration)
            .listBusinessWireAccounts(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.WiresApi = WiresApi;
//# sourceMappingURL=data:application/json;base64,