"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckoutSessionsApi = exports.CheckoutSessionsApiFactory = exports.CheckoutSessionsApiFp = exports.CheckoutSessionsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * CheckoutSessionsApi - axios parameter creator
 * @export
 */
const CheckoutSessionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession: (checkoutSessionCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/checkoutSessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(checkoutSessionCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Extend a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendCheckoutSession: (id, extendCheckoutSessionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("extendCheckoutSession", "id", id);
            const localVarPath = `/v1/checkoutSessions/{id}/extend`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(extendCheckoutSessionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutSession: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getCheckoutSession", "id", id);
            const localVarPath = `/v1/checkoutSessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.CheckoutSessionsApiAxiosParamCreator = CheckoutSessionsApiAxiosParamCreator;
/**
 * CheckoutSessionsApi - functional programming interface
 * @export
 */
const CheckoutSessionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CheckoutSessionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(checkoutSessionCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCheckoutSession(checkoutSessionCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Extend a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendCheckoutSession(id, extendCheckoutSessionRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.extendCheckoutSession(id, extendCheckoutSessionRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutSession(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCheckoutSession(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.CheckoutSessionsApiFp = CheckoutSessionsApiFp;
/**
 * CheckoutSessionsApi - factory interface
 * @export
 */
const CheckoutSessionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CheckoutSessionsApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a checkout session
         * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(checkoutSessionCreationRequest, options) {
            return localVarFp
                .createCheckoutSession(checkoutSessionCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Extend a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extendCheckoutSession(id, extendCheckoutSessionRequest, options) {
            return localVarFp
                .extendCheckoutSession(id, extendCheckoutSessionRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a checkout session
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutSession(id, options) {
            return localVarFp
                .getCheckoutSession(id, options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.CheckoutSessionsApiFactory = CheckoutSessionsApiFactory;
/**
 * CheckoutSessionsApi - object-oriented interface
 * @export
 * @class CheckoutSessionsApi
 * @extends {BaseAPI}
 */
class CheckoutSessionsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    createCheckoutSession(checkoutSessionCreationRequest, options) {
        return (0, exports.CheckoutSessionsApiFp)(this.configuration)
            .createCheckoutSession(checkoutSessionCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Extend a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    extendCheckoutSession(id, extendCheckoutSessionRequest, options) {
        return (0, exports.CheckoutSessionsApiFp)(this.configuration)
            .extendCheckoutSession(id, extendCheckoutSessionRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    getCheckoutSession(id, options) {
        return (0, exports.CheckoutSessionsApiFp)(this.configuration)
            .getCheckoutSession(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.CheckoutSessionsApi = CheckoutSessionsApi;
//# sourceMappingURL=data:application/json;base64,