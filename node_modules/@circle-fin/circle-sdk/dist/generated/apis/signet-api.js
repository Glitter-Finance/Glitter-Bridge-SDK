"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignetApi = exports.SignetApiFactory = exports.SignetApiFp = exports.SignetApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SignetApi - axios parameter creator
 * @export
 */
const SignetApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a Signet bank account (Production Only)
         * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSignetAccount: (signetFiatAccountCreationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/signet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter["Content-Type"] = "application/json";
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(signetFiatAccountCreationRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary Get a Signet bank account (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccount: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessSignetAccount", "id", id);
            const localVarPath = `/v1/businessAccount/banks/signet/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
         * @summary Get Signet instructions (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccountInstructions: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)("getBusinessSignetAccountInstructions", "id", id);
            const localVarPath = `/v1/businessAccount/banks/signet/{id}/instructions`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        }),
        /**
         *
         * @summary List all Signet bank accounts (Production Only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSignetAccounts: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/businessAccount/banks/signet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearerAuth required
            // http bearer authentication required
            yield (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions
            };
        })
    };
};
exports.SignetApiAxiosParamCreator = SignetApiAxiosParamCreator;
/**
 * SignetApi - functional programming interface
 * @export
 */
const SignetApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SignetApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create a Signet bank account (Production Only)
         * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSignetAccount(signetFiatAccountCreationRequest, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createBusinessSignetAccount(signetFiatAccountCreationRequest, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Get a Signet bank account (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccount(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessSignetAccount(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
         * @summary Get Signet instructions (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccountInstructions(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBusinessSignetAccountInstructions(id, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary List all Signet bank accounts (Production Only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSignetAccounts(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listBusinessSignetAccounts(options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        }
    };
};
exports.SignetApiFp = SignetApiFp;
/**
 * SignetApi - factory interface
 * @export
 */
const SignetApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SignetApiFp)(configuration);
    return {
        /**
         *
         * @summary Create a Signet bank account (Production Only)
         * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBusinessSignetAccount(signetFiatAccountCreationRequest, options) {
            return localVarFp
                .createBusinessSignetAccount(signetFiatAccountCreationRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get a Signet bank account (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccount(id, options) {
            return localVarFp
                .getBusinessSignetAccount(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
         * @summary Get Signet instructions (Production Only)
         * @param {string} id Universally unique identifier (UUID v4) of a resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessSignetAccountInstructions(id, options) {
            return localVarFp
                .getBusinessSignetAccountInstructions(id, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List all Signet bank accounts (Production Only).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBusinessSignetAccounts(options) {
            return localVarFp
                .listBusinessSignetAccounts(options)
                .then((request) => request(axios, basePath));
        }
    };
};
exports.SignetApiFactory = SignetApiFactory;
/**
 * SignetApi - object-oriented interface
 * @export
 * @class SignetApi
 * @extends {BaseAPI}
 */
class SignetApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create a Signet bank account (Production Only)
     * @param {SignetFiatAccountCreationRequest} [signetFiatAccountCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignetApi
     */
    createBusinessSignetAccount(signetFiatAccountCreationRequest, options) {
        return (0, exports.SignetApiFp)(this.configuration)
            .createBusinessSignetAccount(signetFiatAccountCreationRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get a Signet bank account (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignetApi
     */
    getBusinessSignetAccount(id, options) {
        return (0, exports.SignetApiFp)(this.configuration)
            .getBusinessSignetAccount(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Signet transfer instructions into the Circle bank account given your bank account id (only available on Production now).
     * @summary Get Signet instructions (Production Only)
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignetApi
     */
    getBusinessSignetAccountInstructions(id, options) {
        return (0, exports.SignetApiFp)(this.configuration)
            .getBusinessSignetAccountInstructions(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List all Signet bank accounts (Production Only).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignetApi
     */
    listBusinessSignetAccounts(options) {
        return (0, exports.SignetApiFp)(this.configuration)
            .listBusinessSignetAccounts(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.SignetApi = SignetApi;
//# sourceMappingURL=data:application/json;base64,