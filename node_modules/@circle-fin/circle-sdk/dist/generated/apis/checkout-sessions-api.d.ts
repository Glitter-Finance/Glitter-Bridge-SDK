/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { Configuration } from "../configuration";
import { RequestArgs, BaseAPI } from "../base";
import { CheckoutSessionCreationRequest } from "../models";
import { CreateCheckoutSessionResponse } from "../models";
import { ExtendCheckoutSessionRequest } from "../models";
import { ExtendCheckoutSessionResponse } from "../models";
import { GetCheckoutSessionResponse } from "../models";
/**
 * CheckoutSessionsApi - axios parameter creator
 * @export
 */
export declare const CheckoutSessionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSession: (checkoutSessionCreationRequest?: CheckoutSessionCreationRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Extend a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendCheckoutSession: (id: string, extendCheckoutSessionRequest?: ExtendCheckoutSessionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckoutSession: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CheckoutSessionsApi - functional programming interface
 * @export
 */
export declare const CheckoutSessionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSession(checkoutSessionCreationRequest?: CheckoutSessionCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCheckoutSessionResponse>>;
    /**
     *
     * @summary Extend a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendCheckoutSession(id: string, extendCheckoutSessionRequest?: ExtendCheckoutSessionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExtendCheckoutSessionResponse>>;
    /**
     *
     * @summary Get a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckoutSession(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCheckoutSessionResponse>>;
};
/**
 * CheckoutSessionsApi - factory interface
 * @export
 */
export declare const CheckoutSessionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSession(checkoutSessionCreationRequest?: CheckoutSessionCreationRequest, options?: any): AxiosPromise<CreateCheckoutSessionResponse>;
    /**
     *
     * @summary Extend a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    extendCheckoutSession(id: string, extendCheckoutSessionRequest?: ExtendCheckoutSessionRequest, options?: any): AxiosPromise<ExtendCheckoutSessionResponse>;
    /**
     *
     * @summary Get a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCheckoutSession(id: string, options?: any): AxiosPromise<GetCheckoutSessionResponse>;
};
/**
 * CheckoutSessionsApi - object-oriented interface
 * @export
 * @class CheckoutSessionsApi
 * @extends {BaseAPI}
 */
export declare class CheckoutSessionsApi extends BaseAPI {
    /**
     *
     * @summary Create a checkout session
     * @param {CheckoutSessionCreationRequest} [checkoutSessionCreationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    createCheckoutSession(checkoutSessionCreationRequest?: CheckoutSessionCreationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CreateCheckoutSessionResponse>>;
    /**
     *
     * @summary Extend a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {ExtendCheckoutSessionRequest} [extendCheckoutSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    extendCheckoutSession(id: string, extendCheckoutSessionRequest?: ExtendCheckoutSessionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExtendCheckoutSessionResponse>>;
    /**
     *
     * @summary Get a checkout session
     * @param {string} id Universally unique identifier (UUID v4) of a resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    getCheckoutSession(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<GetCheckoutSessionResponse>>;
}
