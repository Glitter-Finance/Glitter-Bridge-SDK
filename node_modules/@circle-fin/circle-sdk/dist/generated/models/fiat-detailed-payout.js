"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiatDetailedPayoutStatusEnum = void 0;
exports.FiatDetailedPayoutStatusEnum = {
    Pending: "pending",
    Complete: "complete",
    Failed: "failed"
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlhdC1kZXRhaWxlZC1wYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2VuZXJhdGVkL21vZGVscy9maWF0LWRldGFpbGVkLXBheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQjs7OztHQUlHOzs7QUEwSFUsUUFBQSw0QkFBNEIsR0FBRztJQUMxQyxPQUFPLEVBQUUsU0FBUztJQUNsQixRQUFRLEVBQUUsVUFBVTtJQUNwQixNQUFNLEVBQUUsUUFBUTtDQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogZXNsaW50LWRpc2FibGUgKi9cbi8qKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5cbi8vIE1heSBjb250YWluIHVudXNlZCBpbXBvcnRzIGluIHNvbWUgY2FzZXNcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IEZpYXRNb25leVVzZCB9IGZyb20gXCIuL2ZpYXQtbW9uZXktdXNkXCI7XG4vLyBNYXkgY29udGFpbiB1bnVzZWQgaW1wb3J0cyBpbiBzb21lIGNhc2VzXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBGaWF0UGF5b3V0RGVzdGluYXRpb24gfSBmcm9tIFwiLi9maWF0LXBheW91dC1kZXN0aW5hdGlvblwiO1xuLy8gTWF5IGNvbnRhaW4gdW51c2VkIGltcG9ydHMgaW4gc29tZSBjYXNlc1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgRmluYWxBZGp1c3RtZW50cyB9IGZyb20gXCIuL2ZpbmFsLWFkanVzdG1lbnRzXCI7XG4vLyBNYXkgY29udGFpbiB1bnVzZWQgaW1wb3J0cyBpbiBzb21lIGNhc2VzXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBQYXlvdXRFcnJvckNvZGUgfSBmcm9tIFwiLi9wYXlvdXQtZXJyb3ItY29kZVwiO1xuLy8gTWF5IGNvbnRhaW4gdW51c2VkIGltcG9ydHMgaW4gc29tZSBjYXNlc1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgUGF5b3V0TW9uZXkgfSBmcm9tIFwiLi9wYXlvdXQtbW9uZXlcIjtcbi8vIE1heSBjb250YWluIHVudXNlZCBpbXBvcnRzIGluIHNvbWUgY2FzZXNcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IFJpc2tFdmFsdWF0aW9uIH0gZnJvbSBcIi4vcmlzay1ldmFsdWF0aW9uXCI7XG4vLyBNYXkgY29udGFpbiB1bnVzZWQgaW1wb3J0cyBpbiBzb21lIGNhc2VzXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBVbndpdGhkcmF3YWxPYmplY3QgfSBmcm9tIFwiLi91bndpdGhkcmF3YWwtb2JqZWN0XCI7XG5cbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgRmlhdERldGFpbGVkUGF5b3V0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlhdERldGFpbGVkUGF5b3V0IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBzeXN0ZW0gZ2VuZXJhdGVkIGlkZW50aWZpZXIgZm9yIHRoZSBlbnRpdHkuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBGaWF0RGV0YWlsZWRQYXlvdXRcbiAgICovXG4gIGlkPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNvdXJjZSB3YWxsZXQgdXNlZCB0byBmdW5kIGEgcGF5b3V0LlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICBzb3VyY2VXYWxsZXRJZD86IHN0cmluZztcbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlIHtGaWF0UGF5b3V0RGVzdGluYXRpb259XG4gICAqIEBtZW1iZXJvZiBGaWF0RGV0YWlsZWRQYXlvdXRcbiAgICovXG4gIGRlc3RpbmF0aW9uPzogRmlhdFBheW91dERlc3RpbmF0aW9uO1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge0ZpYXRNb25leVVzZH1cbiAgICogQG1lbWJlcm9mIEZpYXREZXRhaWxlZFBheW91dFxuICAgKi9cbiAgYW1vdW50PzogRmlhdE1vbmV5VXNkO1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge1BheW91dE1vbmV5fVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICB0b0Ftb3VudD86IFBheW91dE1vbmV5O1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge0ZpYXRNb25leVVzZH1cbiAgICogQG1lbWJlcm9mIEZpYXREZXRhaWxlZFBheW91dFxuICAgKi9cbiAgZmVlcz86IEZpYXRNb25leVVzZDtcbiAgLyoqXG4gICAqIFN0YXR1cyBvZiB0aGUgcGF5b3V0LiBTdGF0dXMgYHBlbmRpbmdgIGluZGljYXRlcyB0aGF0IHRoZSBwYXlvdXQgaXMgaW4gcHJvY2VzczsgYGNvbXBsZXRlYCBpbmRpY2F0ZXMgaXQgZmluaXNoZWQgc3VjY2Vzc2Z1bGx5OyBgZmFpbGVkYCBpbmRpY2F0ZXMgaXQgZmFpbGVkLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICBzdGF0dXM/OiBGaWF0RGV0YWlsZWRQYXlvdXRTdGF0dXNFbnVtO1xuICAvKipcbiAgICogQSBwYXlvdXQgdHJhY2tpbmcgcmVmZXJlbmNlLiBXaWxsIGJlIHByZXNlbnQgb25jZSBrbm93bi5cbiAgICogQHR5cGUge2FueX1cbiAgICogQG1lbWJlcm9mIEZpYXREZXRhaWxlZFBheW91dFxuICAgKi9cbiAgdHJhY2tpbmdSZWY/OiBhbnkgfCBudWxsO1xuICAvKipcbiAgICogRXh0ZXJuYWwgbmV0d29yayBpZGVudGlmaWVyIHdoaWNoIHdpbGwgYmUgcHJlc2VudCBvbmNlIHByb3ZpZGVkIGZyb20gdGhlIGFwcGxpY2FibGUgbmV0d29yay4gICBFeGFtcGxlczogKiAqKklucHV0L091dHB1dCBNZXNzYWdlIEFjY291bnRhYmlsaXR5IERhdGEgKElNQUQvT01BRCkqKjogdW5pcXVlIG51bWJlciBnaXZlbiB0byBlYWNoIEZlZFdpcmUgcGF5bWVudCB3aGVuIHVzaW5nIHRoZSBGZWRlcmFsIFJlc2VydmUgQmFuayBTZXJ2aWNlIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGludmVzdGlnYXRlIGFuZCB0cmFjayB3aXJlIHRyYW5zZmVycy5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQG1lbWJlcm9mIEZpYXREZXRhaWxlZFBheW91dFxuICAgKi9cbiAgZXh0ZXJuYWxSZWY/OiBzdHJpbmc7XG4gIC8qKlxuICAgKlxuICAgKiBAdHlwZSB7UGF5b3V0RXJyb3JDb2RlfVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICBlcnJvckNvZGU/OiBQYXlvdXRFcnJvckNvZGUgfCBudWxsO1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge1Jpc2tFdmFsdWF0aW9ufVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICByaXNrRXZhbHVhdGlvbj86IFJpc2tFdmFsdWF0aW9uIHwgbnVsbDtcbiAgLyoqXG4gICAqXG4gICAqIEB0eXBlIHtGaW5hbEFkanVzdG1lbnRzfVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICBhZGp1c3RtZW50cz86IEZpbmFsQWRqdXN0bWVudHMgfCBudWxsO1xuICAvKipcbiAgICpcbiAgICogQHR5cGUge1Vud2l0aGRyYXdhbE9iamVjdH1cbiAgICogQG1lbWJlcm9mIEZpYXREZXRhaWxlZFBheW91dFxuICAgKi9cbiAgcmV0dXJuPzogVW53aXRoZHJhd2FsT2JqZWN0IHwgbnVsbDtcbiAgLyoqXG4gICAqIElTTy04NjAxIFVUQyBkYXRlL3RpbWUgZm9ybWF0LlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgRmlhdERldGFpbGVkUGF5b3V0XG4gICAqL1xuICBjcmVhdGVEYXRlPzogc3RyaW5nO1xuICAvKipcbiAgICogSVNPLTg2MDEgVVRDIGRhdGUvdGltZSBmb3JtYXQuXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBtZW1iZXJvZiBGaWF0RGV0YWlsZWRQYXlvdXRcbiAgICovXG4gIHVwZGF0ZURhdGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBGaWF0RGV0YWlsZWRQYXlvdXRTdGF0dXNFbnVtID0ge1xuICBQZW5kaW5nOiBcInBlbmRpbmdcIixcbiAgQ29tcGxldGU6IFwiY29tcGxldGVcIixcbiAgRmFpbGVkOiBcImZhaWxlZFwiXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBGaWF0RGV0YWlsZWRQYXlvdXRTdGF0dXNFbnVtID1cbiAgdHlwZW9mIEZpYXREZXRhaWxlZFBheW91dFN0YXR1c0VudW1ba2V5b2YgdHlwZW9mIEZpYXREZXRhaWxlZFBheW91dFN0YXR1c0VudW1dO1xuIl19