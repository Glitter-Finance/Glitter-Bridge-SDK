"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenBridge__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "_admin",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint16",
                name: "destinationChainId",
                type: "uint16",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "tokenContractAddress",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes",
                name: "destinationWallet",
                type: "bytes",
            },
        ],
        name: "BridgeDeposit",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "address",
                name: "tokenContractAddress",
                type: "address",
            },
            {
                indexed: false,
                internalType: "address",
                name: "destinationWallet",
                type: "address",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "depositId",
                type: "bytes32",
            },
        ],
        name: "BridgeRelease",
        type: "event",
    },
    {
        inputs: [],
        name: "admin",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint16",
                name: "chain",
                type: "uint16",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "circleDepositAddress",
                type: "address",
            },
            {
                internalType: "address",
                name: "erc20Address",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "destinationWallet",
                type: "bytes",
            },
        ],
        name: "deposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "destinationWallet",
                type: "address",
            },
            {
                internalType: "address",
                name: "erc20Address",
                type: "address",
            },
            {
                internalType: "bytes32",
                name: "bridgeTransferId",
                type: "bytes32",
            },
        ],
        name: "release",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50604051610a00380380610a00833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b6108e9806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638e57b39914610046578063d5a554d314610062578063f851a4401461007e575b600080fd5b610060600480360381019061005b91906103b5565b61009c565b005b61007c6004803603810190610077919061059c565b6101ee565b005b6100866102b3565b6040516100939190610642565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461012a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610121906106ba565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3385876040518463ffffffff1660e01b8152600401610167939291906106e9565b6020604051808303816000875af1158015610186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101aa9190610758565b507fb241bb000ff9b0ab76bbe9c8549ccc959df06b4385982e44a9d5643fe3bccb2f848385846040516101e09493929190610794565b60405180910390a150505050565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3385876040518463ffffffff1660e01b815260040161022b939291906106e9565b6020604051808303816000875af115801561024a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026e9190610758565b507fec2c913b1ddfaf80c662630f172736fca0e83b547589f7ea448f6582529363f6858584846040516102a49493929190610867565b60405180910390a15050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6102fe816102eb565b811461030957600080fd5b50565b60008135905061031b816102f5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061034c82610321565b9050919050565b61035c81610341565b811461036757600080fd5b50565b60008135905061037981610353565b92915050565b6000819050919050565b6103928161037f565b811461039d57600080fd5b50565b6000813590506103af81610389565b92915050565b600080600080608085870312156103cf576103ce6102e1565b5b60006103dd8782880161030c565b94505060206103ee8782880161036a565b93505060406103ff8782880161036a565b9250506060610410878288016103a0565b91505092959194509250565b600061ffff82169050919050565b6104338161041c565b811461043e57600080fd5b50565b6000813590506104508161042a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104a982610460565b810181811067ffffffffffffffff821117156104c8576104c7610471565b5b80604052505050565b60006104db6102d7565b90506104e782826104a0565b919050565b600067ffffffffffffffff82111561050757610506610471565b5b61051082610460565b9050602081019050919050565b82818337600083830152505050565b600061053f61053a846104ec565b6104d1565b90508281526020810184848401111561055b5761055a61045b565b5b61056684828561051d565b509392505050565b600082601f83011261058357610582610456565b5b813561059384826020860161052c565b91505092915050565b600080600080600060a086880312156105b8576105b76102e1565b5b60006105c688828901610441565b95505060206105d78882890161030c565b94505060406105e88882890161036a565b93505060606105f98882890161036a565b925050608086013567ffffffffffffffff81111561061a576106196102e6565b5b6106268882890161056e565b9150509295509295909350565b61063c81610341565b82525050565b60006020820190506106576000830184610633565b92915050565b600082825260208201905092915050565b7f6f6e6c792063616c6c61626c652062792061646d696e00000000000000000000600082015250565b60006106a460168361065d565b91506106af8261066e565b602082019050919050565b600060208201905081810360008301526106d381610697565b9050919050565b6106e3816102eb565b82525050565b60006060820190506106fe6000830186610633565b61070b6020830185610633565b61071860408301846106da565b949350505050565b60008115159050919050565b61073581610720565b811461074057600080fd5b50565b6000815190506107528161072c565b92915050565b60006020828403121561076e5761076d6102e1565b5b600061077c84828501610743565b91505092915050565b61078e8161037f565b82525050565b60006080820190506107a960008301876106da565b6107b66020830186610633565b6107c36040830185610633565b6107d06060830184610785565b95945050505050565b6107e28161041c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610822578082015181840152602081019050610807565b60008484015250505050565b6000610839826107e8565b61084381856107f3565b9350610853818560208601610804565b61085c81610460565b840191505092915050565b600060808201905061087c60008301876107d9565b61088960208301866106da565b6108966040830185610633565b81810360608301526108a8818461082e565b90509594505050505056fea2646970667358221220af3bf7d6eb20d7a7258b130a0db552e5b6ea8306b875c9517139fc571fedc15864736f6c63430008110033";
const isSuperArgs = (xs) => xs.length > 1;
class TokenBridge__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(_admin, overrides) {
        return super.deploy(_admin, overrides || {});
    }
    getDeployTransaction(_admin, overrides) {
        return super.getDeployTransaction(_admin, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.TokenBridge__factory = TokenBridge__factory;
TokenBridge__factory.bytecode = _bytecode;
TokenBridge__factory.abi = _abi;
