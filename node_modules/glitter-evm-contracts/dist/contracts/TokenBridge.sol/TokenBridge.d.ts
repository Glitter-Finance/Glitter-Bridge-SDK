import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface TokenBridgeInterface extends utils.Interface {
    functions: {
        "admin()": FunctionFragment;
        "deposit(uint16,uint256,address,address,bytes)": FunctionFragment;
        "release(uint256,address,address,bytes32)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "admin" | "deposit" | "release"): FunctionFragment;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "deposit", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "release", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
    events: {
        "BridgeDeposit(uint16,uint256,address,bytes)": EventFragment;
        "BridgeRelease(uint256,address,address,bytes32)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "BridgeDeposit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BridgeRelease"): EventFragment;
}
export interface BridgeDepositEventObject {
    destinationChainId: number;
    amount: BigNumber;
    tokenContractAddress: string;
    destinationWallet: string;
}
export type BridgeDepositEvent = TypedEvent<[
    number,
    BigNumber,
    string,
    string
], BridgeDepositEventObject>;
export type BridgeDepositEventFilter = TypedEventFilter<BridgeDepositEvent>;
export interface BridgeReleaseEventObject {
    amount: BigNumber;
    tokenContractAddress: string;
    destinationWallet: string;
    depositId: string;
}
export type BridgeReleaseEvent = TypedEvent<[
    BigNumber,
    string,
    string,
    string
], BridgeReleaseEventObject>;
export type BridgeReleaseEventFilter = TypedEventFilter<BridgeReleaseEvent>;
export interface TokenBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TokenBridgeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        admin(overrides?: CallOverrides): Promise<[string]>;
        deposit(chain: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, circleDepositAddress: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, destinationWallet: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        release(amount: PromiseOrValue<BigNumberish>, destinationWallet: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, bridgeTransferId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    admin(overrides?: CallOverrides): Promise<string>;
    deposit(chain: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, circleDepositAddress: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, destinationWallet: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    release(amount: PromiseOrValue<BigNumberish>, destinationWallet: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, bridgeTransferId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        admin(overrides?: CallOverrides): Promise<string>;
        deposit(chain: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, circleDepositAddress: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, destinationWallet: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        release(amount: PromiseOrValue<BigNumberish>, destinationWallet: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, bridgeTransferId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "BridgeDeposit(uint16,uint256,address,bytes)"(destinationChainId?: null, amount?: null, tokenContractAddress?: null, destinationWallet?: null): BridgeDepositEventFilter;
        BridgeDeposit(destinationChainId?: null, amount?: null, tokenContractAddress?: null, destinationWallet?: null): BridgeDepositEventFilter;
        "BridgeRelease(uint256,address,address,bytes32)"(amount?: null, tokenContractAddress?: null, destinationWallet?: null, depositId?: null): BridgeReleaseEventFilter;
        BridgeRelease(amount?: null, tokenContractAddress?: null, destinationWallet?: null, depositId?: null): BridgeReleaseEventFilter;
    };
    estimateGas: {
        admin(overrides?: CallOverrides): Promise<BigNumber>;
        deposit(chain: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, circleDepositAddress: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, destinationWallet: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        release(amount: PromiseOrValue<BigNumberish>, destinationWallet: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, bridgeTransferId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        deposit(chain: PromiseOrValue<BigNumberish>, amount: PromiseOrValue<BigNumberish>, circleDepositAddress: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, destinationWallet: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        release(amount: PromiseOrValue<BigNumberish>, destinationWallet: PromiseOrValue<string>, erc20Address: PromiseOrValue<string>, bridgeTransferId: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
