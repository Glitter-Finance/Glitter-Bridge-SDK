/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BridgeV2AbiInterface extends utils.Interface {
  functions: {
    "CONTRACT_ID()": FunctionFragment;
    "MAX_INACTIVE_PERIOD()": FunctionFragment;
    "MIN_INACTIVE_PERIOD()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "addVault(address)": FunctionFragment;
    "deposit(address,uint256,uint16,bytes,uint32)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "inactivityPeriod()": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "lastActivity()": FunctionFragment;
    "maxFeeRate()": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "recoverer()": FunctionFragment;
    "refund(address,address,uint256,bytes32)": FunctionFragment;
    "release(address,address,uint256,uint16,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setMaxFeeRate(uint16)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vaults(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTRACT_ID"
      | "MAX_INACTIVE_PERIOD"
      | "MIN_INACTIVE_PERIOD"
      | "acceptOwnership"
      | "addVault"
      | "deposit"
      | "feeCollector"
      | "inactivityPeriod"
      | "initialize"
      | "isActive"
      | "lastActivity"
      | "maxFeeRate"
      | "nonce"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "recoverer"
      | "refund"
      | "release"
      | "renounceOwnership"
      | "setFeeCollector"
      | "setMaxFeeRate"
      | "transferOwnership"
      | "unpause"
      | "vaults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTRACT_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_INACTIVE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_INACTIVE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inactivityPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastActivity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recoverer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vaults", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_INACTIVE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_INACTIVE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inactivityPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFeeRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recoverer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;

  events: {
    "BridgeDeposit(uint256,address,uint256,uint16,bytes,uint32)": EventFragment;
    "BridgeRefund(uint256,address,address,uint256,bytes32)": EventFragment;
    "BridgeRelease(uint256,address,address,uint256,uint16,bytes32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "SetFeeCollector(address)": EventFragment;
    "SetMaxFeeRate(uint16)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VaultAdd(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgeRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeCollector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultAdd"): EventFragment;
}

export interface BridgeDepositEventObject {
  nonce: BigNumber;
  vault: string;
  amount: BigNumber;
  destinationChainId: number;
  destinationAddress: string;
  protocolId: number;
}
export type BridgeDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, number, string, number],
  BridgeDepositEventObject
>;

export type BridgeDepositEventFilter = TypedEventFilter<BridgeDepositEvent>;

export interface BridgeRefundEventObject {
  nonce: BigNumber;
  vault: string;
  destinationAddress: string;
  amount: BigNumber;
  depositId: string;
}
export type BridgeRefundEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  BridgeRefundEventObject
>;

export type BridgeRefundEventFilter = TypedEventFilter<BridgeRefundEvent>;

export interface BridgeReleaseEventObject {
  nonce: BigNumber;
  vault: string;
  destinationAddress: string;
  amount: BigNumber;
  feeRate: number;
  depositId: string;
}
export type BridgeReleaseEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, number, string],
  BridgeReleaseEventObject
>;

export type BridgeReleaseEventFilter = TypedEventFilter<BridgeReleaseEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SetFeeCollectorEventObject {
  feeCollector: string;
}
export type SetFeeCollectorEvent = TypedEvent<
  [string],
  SetFeeCollectorEventObject
>;

export type SetFeeCollectorEventFilter = TypedEventFilter<SetFeeCollectorEvent>;

export interface SetMaxFeeRateEventObject {
  _maxFeeRate: number;
}
export type SetMaxFeeRateEvent = TypedEvent<[number], SetMaxFeeRateEventObject>;

export type SetMaxFeeRateEventFilter = TypedEventFilter<SetMaxFeeRateEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VaultAddEventObject {
  vaultAddress: string;
}
export type VaultAddEvent = TypedEvent<[string], VaultAddEventObject>;

export type VaultAddEventFilter = TypedEventFilter<VaultAddEvent>;

export interface BridgeV2Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeV2AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTRACT_ID(overrides?: CallOverrides): Promise<[string]>;

    MAX_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    MIN_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<[number]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _vault: string,
      _amount: BigNumberish,
      _destinationChainId: BigNumberish,
      _destinationAddress: BytesLike,
      _protocolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    inactivityPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _owner: string,
      _recoverer: string,
      _feeCollector: string,
      _inactivityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    lastActivity(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFeeRate(overrides?: CallOverrides): Promise<[number]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    recoverer(overrides?: CallOverrides): Promise<[string]>;

    refund(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    release(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _feeRate: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxFeeRate(
      _maxFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  CONTRACT_ID(overrides?: CallOverrides): Promise<string>;

  MAX_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<number>;

  MIN_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<number>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addVault(
    _vault: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _vault: string,
    _amount: BigNumberish,
    _destinationChainId: BigNumberish,
    _destinationAddress: BytesLike,
    _protocolId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  inactivityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _owner: string,
    _recoverer: string,
    _feeCollector: string,
    _inactivityPeriod: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  lastActivity(overrides?: CallOverrides): Promise<BigNumber>;

  maxFeeRate(overrides?: CallOverrides): Promise<number>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  recoverer(overrides?: CallOverrides): Promise<string>;

  refund(
    _vault: string,
    _destinationAddress: string,
    _amount: BigNumberish,
    _depositId: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  release(
    _vault: string,
    _destinationAddress: string,
    _amount: BigNumberish,
    _feeRate: BigNumberish,
    _depositId: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxFeeRate(
    _maxFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    CONTRACT_ID(overrides?: CallOverrides): Promise<string>;

    MAX_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<number>;

    MIN_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<number>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addVault(_vault: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      _vault: string,
      _amount: BigNumberish,
      _destinationChainId: BigNumberish,
      _destinationAddress: BytesLike,
      _protocolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    inactivityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _recoverer: string,
      _feeCollector: string,
      _inactivityPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    lastActivity(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeeRate(overrides?: CallOverrides): Promise<number>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    recoverer(overrides?: CallOverrides): Promise<string>;

    refund(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _depositId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    release(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _feeRate: BigNumberish,
      _depositId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxFeeRate(
      _maxFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "BridgeDeposit(uint256,address,uint256,uint16,bytes,uint32)"(
      nonce?: null,
      vault?: null,
      amount?: null,
      destinationChainId?: null,
      destinationAddress?: null,
      protocolId?: null
    ): BridgeDepositEventFilter;
    BridgeDeposit(
      nonce?: null,
      vault?: null,
      amount?: null,
      destinationChainId?: null,
      destinationAddress?: null,
      protocolId?: null
    ): BridgeDepositEventFilter;

    "BridgeRefund(uint256,address,address,uint256,bytes32)"(
      nonce?: null,
      vault?: null,
      destinationAddress?: null,
      amount?: null,
      depositId?: null
    ): BridgeRefundEventFilter;
    BridgeRefund(
      nonce?: null,
      vault?: null,
      destinationAddress?: null,
      amount?: null,
      depositId?: null
    ): BridgeRefundEventFilter;

    "BridgeRelease(uint256,address,address,uint256,uint16,bytes32)"(
      nonce?: null,
      vault?: null,
      destinationAddress?: null,
      amount?: null,
      feeRate?: null,
      depositId?: null
    ): BridgeReleaseEventFilter;
    BridgeRelease(
      nonce?: null,
      vault?: null,
      destinationAddress?: null,
      amount?: null,
      feeRate?: null,
      depositId?: null
    ): BridgeReleaseEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SetFeeCollector(address)"(feeCollector?: null): SetFeeCollectorEventFilter;
    SetFeeCollector(feeCollector?: null): SetFeeCollectorEventFilter;

    "SetMaxFeeRate(uint16)"(_maxFeeRate?: null): SetMaxFeeRateEventFilter;
    SetMaxFeeRate(_maxFeeRate?: null): SetMaxFeeRateEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VaultAdd(address)"(vaultAddress?: null): VaultAddEventFilter;
    VaultAdd(vaultAddress?: null): VaultAddEventFilter;
  };

  estimateGas: {
    CONTRACT_ID(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_INACTIVE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _vault: string,
      _amount: BigNumberish,
      _destinationChainId: BigNumberish,
      _destinationAddress: BytesLike,
      _protocolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    inactivityPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _recoverer: string,
      _feeCollector: string,
      _inactivityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    lastActivity(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverer(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    release(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _feeRate: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxFeeRate(
      _maxFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vaults(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_INACTIVE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_INACTIVE_PERIOD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addVault(
      _vault: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _vault: string,
      _amount: BigNumberish,
      _destinationChainId: BigNumberish,
      _destinationAddress: BytesLike,
      _protocolId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inactivityPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _recoverer: string,
      _feeCollector: string,
      _inactivityPeriod: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastActivity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    release(
      _vault: string,
      _destinationAddress: string,
      _amount: BigNumberish,
      _feeRate: BigNumberish,
      _depositId: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxFeeRate(
      _maxFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
